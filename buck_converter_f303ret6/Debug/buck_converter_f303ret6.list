
buck_converter_f303ret6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002eb4  08002eb4  00003eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee4  08002ee4  0000402c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ee4  08002ee4  0000402c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ee4  08002ee4  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee4  08002ee4  00003ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ee8  08002ee8  00003ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08002eec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000402c  2**0
                  CONTENTS
 10 .bss          0000006c  2000002c  2000002c  0000402c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  0000402c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c6e  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001834  00000000  00000000  00009cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  0000b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003b7  00000000  00000000  0000ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e943  00000000  00000000  0000bdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000869c  00000000  00000000  0002a742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7962  00000000  00000000  00032dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea740  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010e4  00000000  00000000  000ea784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000eb868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e9c 	.word	0x08002e9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08002e9c 	.word	0x08002e9c

080001d4 <main>:
#include "deviceloop.h"

void SystemClock_Config(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

  HAL_Init();
 80001d8:	f000 f8d6 	bl	8000388 <HAL_Init>


  SystemClock_Config();
 80001dc:	f000 f803 	bl	80001e6 <SystemClock_Config>


  while (1)
  {

	  DeviceMainLoop();
 80001e0:	f001 fe50 	bl	8001e84 <DeviceMainLoop>
 80001e4:	e7fc      	b.n	80001e0 <main+0xc>

080001e6 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b090      	sub	sp, #64	@ 0x40
 80001ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	2228      	movs	r2, #40	@ 0x28
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f002 fe25 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000208:	2302      	movs	r3, #2
 800020a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000210:	2310      	movs	r3, #16
 8000212:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000214:	2300      	movs	r3, #0
 8000216:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000218:	f107 0318 	add.w	r3, r7, #24
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9ff 	bl	8000620 <HAL_RCC_OscConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000228:	f000 f818 	bl	800025c <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022c:	230f      	movs	r3, #15
 800022e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000230:	2300      	movs	r3, #0
 8000232:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f001 fa0f 	bl	8001668 <HAL_RCC_ClockConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000250:	f000 f804 	bl	800025c <Error_Handler>
  }
}
 8000254:	bf00      	nop
 8000256:	3740      	adds	r7, #64	@ 0x40
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <Error_Handler>:

void Error_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop

  __disable_irq();
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <Error_Handler+0x8>

08000268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <HAL_MspInit+0x44>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <HAL_MspInit+0x44>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <HAL_MspInit+0x44>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	607b      	str	r3, [r7, #4]
 8000284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <HAL_MspInit+0x44>)
 8000288:	69db      	ldr	r3, [r3, #28]
 800028a:	4a08      	ldr	r2, [pc, #32]	@ (80002ac <HAL_MspInit+0x44>)
 800028c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000290:	61d3      	str	r3, [r2, #28]
 8000292:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <HAL_MspInit+0x44>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40021000 	.word	0x40021000

080002b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <NMI_Handler+0x4>

080002b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <HardFault_Handler+0x4>

080002c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <MemManage_Handler+0x4>

080002c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <BusFault_Handler+0x4>

080002d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <UsageFault_Handler+0x4>

080002d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr

080002e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000306:	f000 f885 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000314:	4b06      	ldr	r3, [pc, #24]	@ (8000330 <SystemInit+0x20>)
 8000316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800031a:	4a05      	ldr	r2, [pc, #20]	@ (8000330 <SystemInit+0x20>)
 800031c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000334:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800036c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000338:	f7ff ffea 	bl	8000310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480c      	ldr	r0, [pc, #48]	@ (8000370 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490d      	ldr	r1, [pc, #52]	@ (8000374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0a      	ldr	r4, [pc, #40]	@ (8000380 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000362:	f002 fd77 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000366:	f7ff ff35 	bl	80001d4 <main>

0800036a <LoopForever>:

LoopForever:
    b LoopForever
 800036a:	e7fe      	b.n	800036a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800036c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000378:	08002eec 	.word	0x08002eec
  ldr r2, =_sbss
 800037c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000380:	20000098 	.word	0x20000098

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <HAL_Init+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <HAL_Init+0x28>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000398:	2003      	movs	r0, #3
 800039a:	f000 f90d 	bl	80005b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800039e:	200f      	movs	r0, #15
 80003a0:	f000 f808 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003a4:	f7ff ff60 	bl	8000268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000

080003b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <HAL_InitTick+0x54>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_InitTick+0x58>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f917 	bl	8000606 <HAL_SYSTICK_Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	e00e      	b.n	8000400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	d80a      	bhi.n	80003fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e8:	2200      	movs	r2, #0
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295
 80003f0:	f000 f8ed 	bl	80005ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f4:	4a06      	ldr	r2, [pc, #24]	@ (8000410 <HAL_InitTick+0x5c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e000      	b.n	8000400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000008 	.word	0x20000008
 8000410:	20000004 	.word	0x20000004

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <HAL_IncTick+0x20>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_IncTick+0x24>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <HAL_IncTick+0x24>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000008 	.word	0x20000008
 8000438:	20000048 	.word	0x20000048

0800043c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000440:	4b03      	ldr	r3, [pc, #12]	@ (8000450 <HAL_GetTick+0x14>)
 8000442:	681b      	ldr	r3, [r3, #0]
}
 8000444:	4618      	mov	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000048 	.word	0x20000048

08000454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f003 0307 	and.w	r3, r3, #7
 8000462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <__NVIC_SetPriorityGrouping+0x44>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000470:	4013      	ands	r3, r2
 8000472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800047c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <__NVIC_SetPriorityGrouping+0x44>)
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	60d3      	str	r3, [r2, #12]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a0:	4b04      	ldr	r3, [pc, #16]	@ (80004b4 <__NVIC_GetPriorityGrouping+0x18>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	0a1b      	lsrs	r3, r3, #8
 80004a6:	f003 0307 	and.w	r3, r3, #7
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	e000ed00 	.word	0xe000ed00

080004b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	db0a      	blt.n	80004e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	490c      	ldr	r1, [pc, #48]	@ (8000504 <__NVIC_SetPriority+0x4c>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	0112      	lsls	r2, r2, #4
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	440b      	add	r3, r1
 80004dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e0:	e00a      	b.n	80004f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4908      	ldr	r1, [pc, #32]	@ (8000508 <__NVIC_SetPriority+0x50>)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	3b04      	subs	r3, #4
 80004f0:	0112      	lsls	r2, r2, #4
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	440b      	add	r3, r1
 80004f6:	761a      	strb	r2, [r3, #24]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	e000e100 	.word	0xe000e100
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050c:	b480      	push	{r7}
 800050e:	b089      	sub	sp, #36	@ 0x24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	f1c3 0307 	rsb	r3, r3, #7
 8000526:	2b04      	cmp	r3, #4
 8000528:	bf28      	it	cs
 800052a:	2304      	movcs	r3, #4
 800052c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	3304      	adds	r3, #4
 8000532:	2b06      	cmp	r3, #6
 8000534:	d902      	bls.n	800053c <NVIC_EncodePriority+0x30>
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	3b03      	subs	r3, #3
 800053a:	e000      	b.n	800053e <NVIC_EncodePriority+0x32>
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000540:	f04f 32ff 	mov.w	r2, #4294967295
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	43da      	mvns	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	401a      	ands	r2, r3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000554:	f04f 31ff 	mov.w	r1, #4294967295
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	fa01 f303 	lsl.w	r3, r1, r3
 800055e:	43d9      	mvns	r1, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000564:	4313      	orrs	r3, r2
         );
}
 8000566:	4618      	mov	r0, r3
 8000568:	3724      	adds	r7, #36	@ 0x24
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3b01      	subs	r3, #1
 8000580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000584:	d301      	bcc.n	800058a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000586:	2301      	movs	r3, #1
 8000588:	e00f      	b.n	80005aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800058a:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <SysTick_Config+0x40>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3b01      	subs	r3, #1
 8000590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000592:	210f      	movs	r1, #15
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f7ff ff8e 	bl	80004b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800059c:	4b05      	ldr	r3, [pc, #20]	@ (80005b4 <SysTick_Config+0x40>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005a2:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <SysTick_Config+0x40>)
 80005a4:	2207      	movs	r2, #7
 80005a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	e000e010 	.word	0xe000e010

080005b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff47 	bl	8000454 <__NVIC_SetPriorityGrouping>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b086      	sub	sp, #24
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	4603      	mov	r3, r0
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005e0:	f7ff ff5c 	bl	800049c <__NVIC_GetPriorityGrouping>
 80005e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	6978      	ldr	r0, [r7, #20]
 80005ec:	f7ff ff8e 	bl	800050c <NVIC_EncodePriority>
 80005f0:	4602      	mov	r2, r0
 80005f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005f6:	4611      	mov	r1, r2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff5d 	bl	80004b8 <__NVIC_SetPriority>
}
 80005fe:	bf00      	nop
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ffb0 	bl	8000574 <SysTick_Config>
 8000614:	4603      	mov	r3, r0
}
 8000616:	4618      	mov	r0, r3
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000626:	af00      	add	r7, sp, #0
 8000628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800062c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000630:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000636:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	f001 b80a 	b.w	800165a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800064a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	f000 8161 	beq.w	800091e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800065c:	4bae      	ldr	r3, [pc, #696]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f003 030c 	and.w	r3, r3, #12
 8000664:	2b04      	cmp	r3, #4
 8000666:	d00c      	beq.n	8000682 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000668:	4bab      	ldr	r3, [pc, #684]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	f003 030c 	and.w	r3, r3, #12
 8000670:	2b08      	cmp	r3, #8
 8000672:	d157      	bne.n	8000724 <HAL_RCC_OscConfig+0x104>
 8000674:	4ba8      	ldr	r3, [pc, #672]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800067c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000680:	d150      	bne.n	8000724 <HAL_RCC_OscConfig+0x104>
 8000682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000686:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800068a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800068e:	fa93 f3a3 	rbit	r3, r3
 8000692:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000696:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800069a:	fab3 f383 	clz	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80006a2:	d802      	bhi.n	80006aa <HAL_RCC_OscConfig+0x8a>
 80006a4:	4b9c      	ldr	r3, [pc, #624]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	e015      	b.n	80006d6 <HAL_RCC_OscConfig+0xb6>
 80006aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006ae:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80006b6:	fa93 f3a3 	rbit	r3, r3
 80006ba:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80006be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006c2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80006c6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80006ca:	fa93 f3a3 	rbit	r3, r3
 80006ce:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80006d2:	4b91      	ldr	r3, [pc, #580]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80006d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80006da:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80006de:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80006e2:	fa92 f2a2 	rbit	r2, r2
 80006e6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80006ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80006ee:	fab2 f282 	clz	r2, r2
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	f042 0220 	orr.w	r2, r2, #32
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	f002 021f 	and.w	r2, r2, #31
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	4013      	ands	r3, r2
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 8108 	beq.w	800091c <HAL_RCC_OscConfig+0x2fc>
 800070c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000710:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	f040 80ff 	bne.w	800091c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	f000 bf9b 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000728:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000734:	d106      	bne.n	8000744 <HAL_RCC_OscConfig+0x124>
 8000736:	4b78      	ldr	r3, [pc, #480]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a77      	ldr	r2, [pc, #476]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	e036      	b.n	80007b2 <HAL_RCC_OscConfig+0x192>
 8000744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000748:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10c      	bne.n	800076e <HAL_RCC_OscConfig+0x14e>
 8000754:	4b70      	ldr	r3, [pc, #448]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a6f      	ldr	r2, [pc, #444]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800075a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b6d      	ldr	r3, [pc, #436]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a6c      	ldr	r2, [pc, #432]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e021      	b.n	80007b2 <HAL_RCC_OscConfig+0x192>
 800076e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000772:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800077e:	d10c      	bne.n	800079a <HAL_RCC_OscConfig+0x17a>
 8000780:	4b65      	ldr	r3, [pc, #404]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a64      	ldr	r2, [pc, #400]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000786:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b62      	ldr	r3, [pc, #392]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a61      	ldr	r2, [pc, #388]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e00b      	b.n	80007b2 <HAL_RCC_OscConfig+0x192>
 800079a:	4b5f      	ldr	r3, [pc, #380]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a5e      	ldr	r2, [pc, #376]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80007a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	4b5c      	ldr	r3, [pc, #368]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a5b      	ldr	r2, [pc, #364]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80007ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80007b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d054      	beq.n	800086c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007c2:	f7ff fe3b 	bl	800043c <HAL_GetTick>
 80007c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007ca:	e00a      	b.n	80007e2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007cc:	f7ff fe36 	bl	800043c <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	2b64      	cmp	r3, #100	@ 0x64
 80007da:	d902      	bls.n	80007e2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80007dc:	2303      	movs	r3, #3
 80007de:	f000 bf3c 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 80007e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007e6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ea:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80007ee:	fa93 f3a3 	rbit	r3, r3
 80007f2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80007f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007fa:	fab3 f383 	clz	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b3f      	cmp	r3, #63	@ 0x3f
 8000802:	d802      	bhi.n	800080a <HAL_RCC_OscConfig+0x1ea>
 8000804:	4b44      	ldr	r3, [pc, #272]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	e015      	b.n	8000836 <HAL_RCC_OscConfig+0x216>
 800080a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800080e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000812:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000816:	fa93 f3a3 	rbit	r3, r3
 800081a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800081e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000822:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000826:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800082a:	fa93 f3a3 	rbit	r3, r3
 800082e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000832:	4b39      	ldr	r3, [pc, #228]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 8000834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000836:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800083a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800083e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000842:	fa92 f2a2 	rbit	r2, r2
 8000846:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800084a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800084e:	fab2 f282 	clz	r2, r2
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	f042 0220 	orr.w	r2, r2, #32
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	f002 021f 	and.w	r2, r2, #31
 800085e:	2101      	movs	r1, #1
 8000860:	fa01 f202 	lsl.w	r2, r1, r2
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0b0      	beq.n	80007cc <HAL_RCC_OscConfig+0x1ac>
 800086a:	e058      	b.n	800091e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800086c:	f7ff fde6 	bl	800043c <HAL_GetTick>
 8000870:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000874:	e00a      	b.n	800088c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000876:	f7ff fde1 	bl	800043c <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	2b64      	cmp	r3, #100	@ 0x64
 8000884:	d902      	bls.n	800088c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8000886:	2303      	movs	r3, #3
 8000888:	f000 bee7 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 800088c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000890:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000894:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000898:	fa93 f3a3 	rbit	r3, r3
 800089c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80008a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	fab3 f383 	clz	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ac:	d802      	bhi.n	80008b4 <HAL_RCC_OscConfig+0x294>
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	e015      	b.n	80008e0 <HAL_RCC_OscConfig+0x2c0>
 80008b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008b8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80008c0:	fa93 f3a3 	rbit	r3, r3
 80008c4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80008c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80008d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80008d4:	fa93 f3a3 	rbit	r3, r3
 80008d8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80008dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <HAL_RCC_OscConfig+0x2f8>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008e0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80008e4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80008e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80008ec:	fa92 f2a2 	rbit	r2, r2
 80008f0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80008f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80008f8:	fab2 f282 	clz	r2, r2
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	f042 0220 	orr.w	r2, r2, #32
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	f002 021f 	and.w	r2, r2, #31
 8000908:	2101      	movs	r1, #1
 800090a:	fa01 f202 	lsl.w	r2, r1, r2
 800090e:	4013      	ands	r3, r2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d1b0      	bne.n	8000876 <HAL_RCC_OscConfig+0x256>
 8000914:	e003      	b.n	800091e <HAL_RCC_OscConfig+0x2fe>
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800091c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800091e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000922:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 816d 	beq.w	8000c0e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000934:	4bcd      	ldr	r3, [pc, #820]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 030c 	and.w	r3, r3, #12
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00c      	beq.n	800095a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000940:	4bca      	ldr	r3, [pc, #808]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	2b08      	cmp	r3, #8
 800094a:	d16e      	bne.n	8000a2a <HAL_RCC_OscConfig+0x40a>
 800094c:	4bc7      	ldr	r3, [pc, #796]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000958:	d167      	bne.n	8000a2a <HAL_RCC_OscConfig+0x40a>
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000964:	fa93 f3a3 	rbit	r3, r3
 8000968:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800096c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000970:	fab3 f383 	clz	r3, r3
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b3f      	cmp	r3, #63	@ 0x3f
 8000978:	d802      	bhi.n	8000980 <HAL_RCC_OscConfig+0x360>
 800097a:	4bbc      	ldr	r3, [pc, #752]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	e013      	b.n	80009a8 <HAL_RCC_OscConfig+0x388>
 8000980:	2302      	movs	r3, #2
 8000982:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000986:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800098a:	fa93 f3a3 	rbit	r3, r3
 800098e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000992:	2302      	movs	r3, #2
 8000994:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000998:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80009a4:	4bb1      	ldr	r3, [pc, #708]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 80009a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009a8:	2202      	movs	r2, #2
 80009aa:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80009ae:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80009b2:	fa92 f2a2 	rbit	r2, r2
 80009b6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80009ba:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80009be:	fab2 f282 	clz	r2, r2
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	f042 0220 	orr.w	r2, r2, #32
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	f002 021f 	and.w	r2, r2, #31
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	4013      	ands	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <HAL_RCC_OscConfig+0x3d0>
 80009da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80009de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d002      	beq.n	80009f0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f000 be35 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f0:	4b9e      	ldr	r3, [pc, #632]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80009f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80009fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	21f8      	movs	r1, #248	@ 0xf8
 8000a06:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000a0e:	fa91 f1a1 	rbit	r1, r1
 8000a12:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000a16:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000a1a:	fab1 f181 	clz	r1, r1
 8000a1e:	b2c9      	uxtb	r1, r1
 8000a20:	408b      	lsls	r3, r1
 8000a22:	4992      	ldr	r1, [pc, #584]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000a24:	4313      	orrs	r3, r2
 8000a26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a28:	e0f1      	b.n	8000c0e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f000 8083 	beq.w	8000b42 <HAL_RCC_OscConfig+0x522>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a42:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000a46:	fa93 f3a3 	rbit	r3, r3
 8000a4a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000a4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a52:	fab3 f383 	clz	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000a5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	461a      	mov	r2, r3
 8000a64:	2301      	movs	r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fce8 	bl	800043c <HAL_GetTick>
 8000a6c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a70:	e00a      	b.n	8000a88 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a72:	f7ff fce3 	bl	800043c <HAL_GetTick>
 8000a76:	4602      	mov	r2, r0
 8000a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d902      	bls.n	8000a88 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	f000 bde9 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000a92:	fa93 f3a3 	rbit	r3, r3
 8000a96:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000a9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aa6:	d802      	bhi.n	8000aae <HAL_RCC_OscConfig+0x48e>
 8000aa8:	4b70      	ldr	r3, [pc, #448]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	e013      	b.n	8000ad6 <HAL_RCC_OscConfig+0x4b6>
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000ab8:	fa93 f3a3 	rbit	r3, r3
 8000abc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000ac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000ad2:	4b66      	ldr	r3, [pc, #408]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8000adc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000ae0:	fa92 f2a2 	rbit	r2, r2
 8000ae4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8000ae8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	f042 0220 	orr.w	r2, r2, #32
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	f002 021f 	and.w	r2, r2, #31
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f202 	lsl.w	r2, r1, r2
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0b4      	beq.n	8000a72 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b08:	4b58      	ldr	r3, [pc, #352]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	21f8      	movs	r1, #248	@ 0xf8
 8000b1e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8000b26:	fa91 f1a1 	rbit	r1, r1
 8000b2a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8000b2e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000b32:	fab1 f181 	clz	r1, r1
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	408b      	lsls	r3, r1
 8000b3a:	494c      	ldr	r1, [pc, #304]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
 8000b40:	e065      	b.n	8000c0e <HAL_RCC_OscConfig+0x5ee>
 8000b42:	2301      	movs	r3, #1
 8000b44:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b48:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8000b54:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000b62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6e:	f7ff fc65 	bl	800043c <HAL_GetTick>
 8000b72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b76:	e00a      	b.n	8000b8e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b78:	f7ff fc60 	bl	800043c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d902      	bls.n	8000b8e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f000 bd66 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8000ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bac:	d802      	bhi.n	8000bb4 <HAL_RCC_OscConfig+0x594>
 8000bae:	4b2f      	ldr	r3, [pc, #188]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	e013      	b.n	8000bdc <HAL_RCC_OscConfig+0x5bc>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8000bcc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bd0:	fa93 f3a3 	rbit	r3, r3
 8000bd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8000bd8:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <HAL_RCC_OscConfig+0x64c>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bdc:	2202      	movs	r2, #2
 8000bde:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8000be2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000be6:	fa92 f2a2 	rbit	r2, r2
 8000bea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8000bee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	f042 0220 	orr.w	r2, r2, #32
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	f002 021f 	and.w	r2, r2, #31
 8000c02:	2101      	movs	r1, #1
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1b4      	bne.n	8000b78 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8119 	beq.w	8000e56 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 8082 	beq.w	8000d3a <HAL_RCC_OscConfig+0x71a>
 8000c36:	2301      	movs	r3, #1
 8000c38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000c40:	fa93 f3a3 	rbit	r3, r3
 8000c44:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8000c48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c4c:	fab3 f383 	clz	r3, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_RCC_OscConfig+0x650>)
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c60:	f7ff fbec 	bl	800043c <HAL_GetTick>
 8000c64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c68:	e00f      	b.n	8000c8a <HAL_RCC_OscConfig+0x66a>
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c74:	f7ff fbe2 	bl	800043c <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d902      	bls.n	8000c8a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8000c84:	2303      	movs	r3, #3
 8000c86:	f000 bce8 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000c94:	fa93 f2a3 	rbit	r2, r3
 8000c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000caa:	2202      	movs	r2, #2
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	fa93 f2a3 	rbit	r2, r3
 8000cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cce:	2202      	movs	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	fa93 f2a3 	rbit	r2, r3
 8000ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ce4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ce8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cea:	4bb0      	ldr	r3, [pc, #704]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000cec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cf2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	6019      	str	r1, [r3, #0]
 8000cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000cfe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	fa93 f1a3 	rbit	r1, r3
 8000d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d10:	6019      	str	r1, [r3, #0]
  return result;
 8000d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d16:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	fab3 f383 	clz	r3, r3
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d09d      	beq.n	8000c74 <HAL_RCC_OscConfig+0x654>
 8000d38:	e08d      	b.n	8000e56 <HAL_RCC_OscConfig+0x836>
 8000d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d4a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	fa93 f2a3 	rbit	r2, r3
 8000d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d58:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d5c:	601a      	str	r2, [r3, #0]
  return result;
 8000d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d66:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb0 <HAL_RCC_OscConfig+0x990>)
 8000d72:	4413      	add	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	461a      	mov	r2, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fb5e 	bl	800043c <HAL_GetTick>
 8000d80:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d84:	e00a      	b.n	8000d9c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d86:	f7ff fb59 	bl	800043c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d902      	bls.n	8000d9c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	f000 bc5f 	b.w	800165a <HAL_RCC_OscConfig+0x103a>
 8000d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000da0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000da4:	2202      	movs	r2, #2
 8000da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	fa93 f2a3 	rbit	r2, r3
 8000db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dc8:	2202      	movs	r2, #2
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	fa93 f2a3 	rbit	r2, r3
 8000dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dde:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000de8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000dec:	2202      	movs	r2, #2
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	fa93 f2a3 	rbit	r2, r3
 8000dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e02:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8000e06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	4b68      	ldr	r3, [pc, #416]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e14:	2102      	movs	r1, #2
 8000e16:	6019      	str	r1, [r3, #0]
 8000e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	fa93 f1a3 	rbit	r1, r3
 8000e26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e2a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000e2e:	6019      	str	r1, [r3, #0]
  return result;
 8000e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d197      	bne.n	8000d86 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 819c 	beq.w	80011a4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b4e      	ldr	r3, [pc, #312]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d116      	bne.n	8000eac <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a4a      	ldr	r2, [pc, #296]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b48      	ldr	r3, [pc, #288]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8000e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ea0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ea4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	4b41      	ldr	r3, [pc, #260]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d11a      	bne.n	8000eee <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff faba 	bl	800043c <HAL_GetTick>
 8000ec8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	e009      	b.n	8000ee2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ece:	f7ff fab5 	bl	800043c <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	@ 0x64
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e3bb      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <HAL_RCC_OscConfig+0x994>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0ef      	beq.n	8000ece <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ef2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d106      	bne.n	8000f0c <HAL_RCC_OscConfig+0x8ec>
 8000efe:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	e035      	b.n	8000f78 <HAL_RCC_OscConfig+0x958>
 8000f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x916>
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	4a22      	ldr	r2, [pc, #136]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	6213      	str	r3, [r2, #32]
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f2e:	f023 0304 	bic.w	r3, r3, #4
 8000f32:	6213      	str	r3, [r2, #32]
 8000f34:	e020      	b.n	8000f78 <HAL_RCC_OscConfig+0x958>
 8000f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b05      	cmp	r3, #5
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x940>
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a18      	ldr	r2, [pc, #96]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a15      	ldr	r2, [pc, #84]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0x958>
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4a11      	ldr	r2, [pc, #68]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f66:	f023 0301 	bic.w	r3, r3, #1
 8000f6a:	6213      	str	r3, [r2, #32]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <HAL_RCC_OscConfig+0x98c>)
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 8085 	beq.w	8001094 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fa57 	bl	800043c <HAL_GetTick>
 8000f8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f92:	e011      	b.n	8000fb8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f94:	f7ff fa52 	bl	800043c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d907      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e356      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	10908120 	.word	0x10908120
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fbc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fc8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	fa93 f2a3 	rbit	r2, r3
 8000fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fe0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	fa93 f2a3 	rbit	r2, r3
 8000ff6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ffa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000ffe:	601a      	str	r2, [r3, #0]
  return result;
 8001000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001004:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001008:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_RCC_OscConfig+0xa00>
 800101a:	4b98      	ldr	r3, [pc, #608]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0xa28>
 8001020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001024:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001028:	2202      	movs	r2, #2
 800102a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001030:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	fa93 f2a3 	rbit	r2, r3
 800103a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800103e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b8d      	ldr	r3, [pc, #564]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001048:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800104c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001050:	2102      	movs	r1, #2
 8001052:	6011      	str	r1, [r2, #0]
 8001054:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001058:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	fa92 f1a2 	rbit	r1, r2
 8001062:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001066:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800106a:	6011      	str	r1, [r2, #0]
  return result;
 800106c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001070:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001074:	6812      	ldr	r2, [r2, #0]
 8001076:	fab2 f282 	clz	r2, r2
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	f002 021f 	and.w	r2, r2, #31
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d080      	beq.n	8000f94 <HAL_RCC_OscConfig+0x974>
 8001092:	e07d      	b.n	8001190 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff f9d2 	bl	800043c <HAL_GetTick>
 8001098:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109c:	e00b      	b.n	80010b6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff f9cd 	bl	800043c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e2d1      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 80010b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ba:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80010be:	2202      	movs	r2, #2
 80010c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	fa93 f2a3 	rbit	r2, r3
 80010d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010d4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010de:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	fa93 f2a3 	rbit	r2, r3
 80010f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80010fc:	601a      	str	r2, [r3, #0]
  return result;
 80010fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001102:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001106:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <HAL_RCC_OscConfig+0xafe>
 8001118:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	e013      	b.n	8001146 <HAL_RCC_OscConfig+0xb26>
 800111e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001122:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001126:	2202      	movs	r2, #2
 8001128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800112e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fa93 f2a3 	rbit	r2, r3
 8001138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800113c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	4b4e      	ldr	r3, [pc, #312]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800114a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800114e:	2102      	movs	r1, #2
 8001150:	6011      	str	r1, [r2, #0]
 8001152:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001156:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	fa92 f1a2 	rbit	r1, r2
 8001160:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001164:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001168:	6011      	str	r1, [r2, #0]
  return result;
 800116a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800116e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f002 021f 	and.w	r2, r2, #31
 8001184:	2101      	movs	r1, #1
 8001186:	fa01 f202 	lsl.w	r2, r1, r2
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d186      	bne.n	800109e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001190:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001194:	2b01      	cmp	r3, #1
 8001196:	d105      	bne.n	80011a4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001198:	4b38      	ldr	r3, [pc, #224]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a37      	ldr	r2, [pc, #220]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 800119e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8251 	beq.w	8001658 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b08      	cmp	r3, #8
 80011c0:	f000 820f 	beq.w	80015e2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	f040 8165 	bne.w	80014a0 <HAL_RCC_OscConfig+0xe80>
 80011d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80011de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	fa93 f2a3 	rbit	r2, r3
 80011f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80011fa:	601a      	str	r2, [r3, #0]
  return result;
 80011fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001200:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001204:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001210:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	461a      	mov	r2, r3
 8001218:	2300      	movs	r3, #0
 800121a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff f90e 	bl	800043c <HAL_GetTick>
 8001220:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	e009      	b.n	800123a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff f909 	bl	800043c <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e20f      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	fa93 f2a3 	rbit	r2, r3
 8001256:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800125e:	601a      	str	r2, [r3, #0]
  return result;
 8001260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001264:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001268:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126a:	fab3 f383 	clz	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b3f      	cmp	r3, #63	@ 0x3f
 8001272:	d805      	bhi.n	8001280 <HAL_RCC_OscConfig+0xc60>
 8001274:	4b01      	ldr	r3, [pc, #4]	@ (800127c <HAL_RCC_OscConfig+0xc5c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	e02a      	b.n	80012d0 <HAL_RCC_OscConfig+0xcb0>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001284:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800128c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001292:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fa93 f2a3 	rbit	r2, r3
 800129c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012aa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012b8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fa93 f2a3 	rbit	r2, r3
 80012c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4bca      	ldr	r3, [pc, #808]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012d4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80012dc:	6011      	str	r1, [r2, #0]
 80012de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012e2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	fa92 f1a2 	rbit	r1, r2
 80012ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012f0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80012f4:	6011      	str	r1, [r2, #0]
  return result;
 80012f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80012fa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	fab2 f282 	clz	r2, r2
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d184      	bne.n	8001226 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800131c:	4bb6      	ldr	r3, [pc, #728]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 800131e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001320:	f023 020f 	bic.w	r2, r3, #15
 8001324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001328:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	49b1      	ldr	r1, [pc, #708]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001332:	4313      	orrs	r3, r2
 8001334:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001336:	4bb0      	ldr	r3, [pc, #704]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800133e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001342:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6a19      	ldr	r1, [r3, #32]
 800134a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	430b      	orrs	r3, r1
 8001358:	49a7      	ldr	r1, [pc, #668]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001362:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001366:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800136a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001370:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001382:	601a      	str	r2, [r3, #0]
  return result;
 8001384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001388:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800138c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001398:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2301      	movs	r3, #1
 80013a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff f84a 	bl	800043c <HAL_GetTick>
 80013a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ae:	f7ff f845 	bl	800043c <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e14b      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 80013c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80013ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80013e6:	601a      	str	r2, [r3, #0]
  return result;
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80013f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80013fa:	d802      	bhi.n	8001402 <HAL_RCC_OscConfig+0xde2>
 80013fc:	4b7e      	ldr	r3, [pc, #504]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e027      	b.n	8001452 <HAL_RCC_OscConfig+0xe32>
 8001402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001406:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800140a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800140e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001414:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	fa93 f2a3 	rbit	r2, r3
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001448:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	4b6a      	ldr	r3, [pc, #424]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001456:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800145a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800145e:	6011      	str	r1, [r2, #0]
 8001460:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001464:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	fa92 f1a2 	rbit	r1, r2
 800146e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001472:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001476:	6011      	str	r1, [r2, #0]
  return result;
 8001478:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800147c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	fab2 f282 	clz	r2, r2
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	f042 0220 	orr.w	r2, r2, #32
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f002 021f 	and.w	r2, r2, #31
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d087      	beq.n	80013ae <HAL_RCC_OscConfig+0xd8e>
 800149e:	e0db      	b.n	8001658 <HAL_RCC_OscConfig+0x1038>
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80014a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f2a3 	rbit	r2, r3
 80014bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80014c4:	601a      	str	r2, [r3, #0]
  return result;
 80014c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ca:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80014ce:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80014da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	461a      	mov	r2, r3
 80014e2:	2300      	movs	r3, #0
 80014e4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7fe ffa9 	bl	800043c <HAL_GetTick>
 80014ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	e009      	b.n	8001504 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7fe ffa4 	bl	800043c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e0aa      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800150c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001516:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001528:	601a      	str	r2, [r3, #0]
  return result;
 800152a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001532:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b3f      	cmp	r3, #63	@ 0x3f
 800153c:	d802      	bhi.n	8001544 <HAL_RCC_OscConfig+0xf24>
 800153e:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	e027      	b.n	8001594 <HAL_RCC_OscConfig+0xf74>
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800154c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001556:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001572:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	fa93 f2a3 	rbit	r2, r3
 8001586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_RCC_OscConfig+0xfd8>)
 8001592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001594:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001598:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800159c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80015a0:	6011      	str	r1, [r2, #0]
 80015a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015a6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	fa92 f1a2 	rbit	r1, r2
 80015b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015b4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80015b8:	6011      	str	r1, [r2, #0]
  return result;
 80015ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015be:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	fab2 f282 	clz	r2, r2
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	f042 0220 	orr.w	r2, r2, #32
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	f002 021f 	and.w	r2, r2, #31
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d187      	bne.n	80014f0 <HAL_RCC_OscConfig+0xed0>
 80015e0:	e03a      	b.n	8001658 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d104      	bne.n	80015fc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e031      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_RCC_OscConfig+0x1044>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_RCC_OscConfig+0x1044>)
 8001606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001608:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800160c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001610:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	429a      	cmp	r2, r3
 8001622:	d117      	bne.n	8001654 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001624:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001628:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800162c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001630:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001638:	429a      	cmp	r2, r3
 800163a:	d10b      	bne.n	8001654 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800163c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001648:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001650:	429a      	cmp	r2, r3
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b09e      	sub	sp, #120	@ 0x78
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e154      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b89      	ldr	r3, [pc, #548]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b86      	ldr	r3, [pc, #536]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0207 	bic.w	r2, r3, #7
 8001696:	4984      	ldr	r1, [pc, #528]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b82      	ldr	r3, [pc, #520]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e13c      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b7b      	ldr	r3, [pc, #492]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4978      	ldr	r1, [pc, #480]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80cd 	beq.w	8001876 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d137      	bne.n	8001754 <HAL_RCC_ClockConfig+0xec>
 80016e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80016f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80016fc:	d802      	bhi.n	8001704 <HAL_RCC_ClockConfig+0x9c>
 80016fe:	4b6b      	ldr	r3, [pc, #428]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e00f      	b.n	8001724 <HAL_RCC_ClockConfig+0xbc>
 8001704:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800170c:	fa93 f3a3 	rbit	r3, r3
 8001710:	667b      	str	r3, [r7, #100]	@ 0x64
 8001712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001716:	663b      	str	r3, [r7, #96]	@ 0x60
 8001718:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001720:	4b62      	ldr	r3, [pc, #392]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001728:	65ba      	str	r2, [r7, #88]	@ 0x58
 800172a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800172c:	fa92 f2a2 	rbit	r2, r2
 8001730:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001732:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f002 021f 	and.w	r2, r2, #31
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d171      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0ea      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d137      	bne.n	80017cc <HAL_RCC_ClockConfig+0x164>
 800175c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001760:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800176a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	fab3 f383 	clz	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b3f      	cmp	r3, #63	@ 0x3f
 8001774:	d802      	bhi.n	800177c <HAL_RCC_ClockConfig+0x114>
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e00f      	b.n	800179c <HAL_RCC_ClockConfig+0x134>
 800177c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001784:	fa93 f3a3 	rbit	r3, r3
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
 800178a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001798:	4b44      	ldr	r3, [pc, #272]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80017a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017a4:	fa92 f2a2 	rbit	r2, r2
 80017a8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80017aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d135      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0ae      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
 80017cc:	2302      	movs	r3, #2
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80017d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80017e2:	d802      	bhi.n	80017ea <HAL_RCC_ClockConfig+0x182>
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	e00d      	b.n	8001806 <HAL_RCC_ClockConfig+0x19e>
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f6:	2302      	movs	r3, #2
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	61fb      	str	r3, [r7, #28]
 8001802:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001806:	2202      	movs	r2, #2
 8001808:	61ba      	str	r2, [r7, #24]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	fa92 f2a2 	rbit	r2, r2
 8001810:	617a      	str	r2, [r7, #20]
  return result;
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e07a      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 0203 	bic.w	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	491a      	ldr	r1, [pc, #104]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001846:	f7fe fdf9 	bl	800043c <HAL_GetTick>
 800184a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184c:	e00a      	b.n	8001864 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184e:	f7fe fdf5 	bl	800043c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e062      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_RCC_ClockConfig+0x244>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 020c 	and.w	r2, r3, #12
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	429a      	cmp	r2, r3
 8001874:	d1eb      	bne.n	800184e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d215      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 0207 	bic.w	r2, r3, #7
 800188c:	4906      	ldr	r1, [pc, #24]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_RCC_ClockConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d006      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e041      	b.n	800192a <HAL_RCC_ClockConfig+0x2c2>
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000
 80018ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	491a      	ldr	r1, [pc, #104]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4912      	ldr	r1, [pc, #72]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018ee:	f000 f829 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80018f2:	4601      	mov	r1, r0
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_RCC_ClockConfig+0x2cc>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018fc:	22f0      	movs	r2, #240	@ 0xf0
 80018fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	fa92 f2a2 	rbit	r2, r2
 8001906:	60fa      	str	r2, [r7, #12]
  return result;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	fab2 f282 	clz	r2, r2
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	40d3      	lsrs	r3, r2
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_RCC_ClockConfig+0x2d0>)
 8001914:	5cd3      	ldrb	r3, [r2, r3]
 8001916:	fa21 f303 	lsr.w	r3, r1, r3
 800191a:	4a08      	ldr	r2, [pc, #32]	@ (800193c <HAL_RCC_ClockConfig+0x2d4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_RCC_ClockConfig+0x2d8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fd46 	bl	80003b4 <HAL_InitTick>
  
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3778      	adds	r7, #120	@ 0x78
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	08002eb4 	.word	0x08002eb4
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x98>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	2b04      	cmp	r3, #4
 800196c:	d002      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x30>
 800196e:	2b08      	cmp	r3, #8
 8001970:	d003      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x36>
 8001972:	e029      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001976:	613b      	str	r3, [r7, #16]
      break;
 8001978:	e029      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a18      	ldr	r2, [pc, #96]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x98>)
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019a0:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e007      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019b2:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	613b      	str	r3, [r7, #16]
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019ca:	613b      	str	r3, [r7, #16]
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	693b      	ldr	r3, [r7, #16]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	08002ec4 	.word	0x08002ec4
 80019e8:	08002ed4 	.word	0x08002ed4

080019ec <can_receiver_init>:
#include "can_receiver.h"
#include "control_pid_regulator.h"


void can_receiver_init(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
    /** 1. Filtreyi yapılandır **/
    CAN->FMR |= CAN_FMR_FINIT;      // filtre init moduna geç
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <can_receiver_init+0x80>)
 80019f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019f6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a6c <can_receiver_init+0x80>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    // Filtre bank 0, mask mode, 32-bit
    CAN->FA1R |= (1 << 0);          // filtreyi etkinleştir (filter 0)
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <can_receiver_init+0x80>)
 8001a02:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8001a06:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <can_receiver_init+0x80>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
    CAN->FM1R &= ~(1 << 0);         // mask mode
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <can_receiver_init+0x80>)
 8001a12:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001a16:	4a15      	ldr	r2, [pc, #84]	@ (8001a6c <can_receiver_init+0x80>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN->FS1R |= (1 << 0);          // 32-bit
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <can_receiver_init+0x80>)
 8001a22:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a26:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <can_receiver_init+0x80>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    CAN->FFA1R &= ~(1 << 0);        // FIFO 0'a yönlendir
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <can_receiver_init+0x80>)
 8001a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001a36:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <can_receiver_init+0x80>)
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    // Tüm ID'leri kabul et (mask = 0x00000000)
    CAN->sFilterRegister[0].FR1 = 0x00000000;
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <can_receiver_init+0x80>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    CAN->sFilterRegister[0].FR2 = 0x00000000;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <can_receiver_init+0x80>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

    CAN->FMR &= ~CAN_FMR_FINIT;     // filtre init modundan çık
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <can_receiver_init+0x80>)
 8001a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <can_receiver_init+0x80>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40006400 	.word	0x40006400

08001a70 <can_read_msg>:
        can_receive_callback(&rx);    // kullanıcıya mesajı yönlendir
    }
}

void can_read_msg(can_rx_msg_t* msg)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    msg->cmd_id = (CAN->sFIFOMailBox[0].RIR >> 21) & 0x7FF;
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <can_read_msg+0x8c>)
 8001a7a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 8001a7e:	0d5b      	lsrs	r3, r3, #21
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	801a      	strh	r2, [r3, #0]
    msg->dlc = CAN->sFIFOMailBox[0].RDTR & 0x0F;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <can_read_msg+0x8c>)
 8001a8e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	729a      	strb	r2, [r3, #10]

    uint32_t low = CAN->sFIFOMailBox[0].RDLR;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <can_read_msg+0x8c>)
 8001aa0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 8001aa4:	613b      	str	r3, [r7, #16]
    uint32_t high = CAN->sFIFOMailBox[0].RDHR;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <can_read_msg+0x8c>)
 8001aa8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8001aac:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 4; ++i) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e019      	b.n	8001ae8 <can_read_msg+0x78>
        msg->data[i] = (low >> (i * 8)) & 0xFF;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	b2d9      	uxtb	r1, r3
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	460a      	mov	r2, r1
 8001aca:	701a      	strb	r2, [r3, #0]
        msg->data[i + 4] = (high >> (i * 8)) & 0xFF;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	40da      	lsrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	b2d1      	uxtb	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	460a      	mov	r2, r1
 8001ae0:	709a      	strb	r2, [r3, #2]
    for (int i = 0; i < 4; ++i) {
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	dde2      	ble.n	8001ab4 <can_read_msg+0x44>
    }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40006400 	.word	0x40006400

08001b00 <can_receive_callback>:

void can_receive_callback(const can_rx_msg_t* msg)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	if (msg->cmd_id == 0x600 && msg->dlc >= 2) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001b10:	d116      	bne.n	8001b40 <can_receive_callback+0x40>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7a9b      	ldrb	r3, [r3, #10]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d912      	bls.n	8001b40 <can_receive_callback+0x40>
	    float new_kp = ((msg->data[0] << 8) | msg->data[1]) / 100.0f;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	789b      	ldrb	r3, [r3, #2]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	78d2      	ldrb	r2, [r2, #3]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001b4c <can_receive_callback+0x4c>
 8001b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b36:	edc7 7a03 	vstr	s15, [r7, #12]
	    pid_controller.Kp = new_kp;
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <can_receive_callback+0x50>)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6013      	str	r3, [r2, #0]
	}

}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	42c80000 	.word	0x42c80000
 8001b50:	2000000c 	.word	0x2000000c

08001b54 <can_transmitter_init>:
#include "can_transmitter.h"

void can_transmitter_init(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_CANEN;
 8001b58:	4b23      	ldr	r3, [pc, #140]	@ (8001be8 <can_transmitter_init+0x94>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	4a22      	ldr	r2, [pc, #136]	@ (8001be8 <can_transmitter_init+0x94>)
 8001b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b62:	61d3      	str	r3, [r2, #28]
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8001b64:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <can_transmitter_init+0x94>)
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <can_transmitter_init+0x94>)
 8001b6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6153      	str	r3, [r2, #20]

    GPIOB->MODER &= ~(GPIO_MODER_MODER8 | GPIO_MODER_MODER9);
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <can_transmitter_init+0x98>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <can_transmitter_init+0x98>)
 8001b76:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001b7a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (GPIO_MODER_MODER8_1 | GPIO_MODER_MODER9_1);
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <can_transmitter_init+0x98>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1a      	ldr	r2, [pc, #104]	@ (8001bec <can_transmitter_init+0x98>)
 8001b82:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8001b86:	6013      	str	r3, [r2, #0]

    GPIOB->AFR[1] &= ~((0xF << (0 * 4)) | (0xF << (1 * 4)));  // temizle
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <can_transmitter_init+0x98>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	4a17      	ldr	r2, [pc, #92]	@ (8001bec <can_transmitter_init+0x98>)
 8001b8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b92:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  (4 << (0 * 4)) | (4 << (1 * 4));         // PB8, PB9 AF4
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <can_transmitter_init+0x98>)
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	4a14      	ldr	r2, [pc, #80]	@ (8001bec <can_transmitter_init+0x98>)
 8001b9a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001b9e:	6253      	str	r3, [r2, #36]	@ 0x24

    CAN->MCR |= CAN_MCR_INRQ;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]
    while ((CAN->MSR & CAN_MSR_INAK) == 0);
 8001bac:	bf00      	nop
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f9      	beq.n	8001bae <can_transmitter_init+0x5a>

    CAN->BTR = (0 << 30) | (0 << 24) | (12 << 16) | (1 << 20) | (3 << 0);
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <can_transmitter_init+0xa0>)
 8001bbe:	61da      	str	r2, [r3, #28]

    CAN->MCR &= ~CAN_MCR_INRQ;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
    while (CAN->MSR & CAN_MSR_INAK);
 8001bcc:	bf00      	nop
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <can_transmitter_init+0x9c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f9      	bne.n	8001bce <can_transmitter_init+0x7a>
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000400 	.word	0x48000400
 8001bf0:	40006400 	.word	0x40006400
 8001bf4:	001c0003 	.word	0x001c0003

08001bf8 <can_transmitter_send>:

// DBC'ye uygun veri gönderir (CAN1, mailbox 0)
void can_transmitter_send(const can_payload_t* payload)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    // Boş mailbox kontrolü
    if ((CAN1->TSR & CAN_TSR_TME0) == 0)
 8001c00:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d045      	beq.n	8001c98 <can_transmitter_send+0xa0>
        return;

    uint8_t* data = (uint8_t*)payload;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	60fb      	str	r3, [r7, #12]

    // Mesaj başlık yapılandırması
    CAN1->sTxMailBox[0].TIR &= ~CAN_TI0R_TXRQ;      // Önce temizle
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c12:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8001c16:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
    CAN1->sTxMailBox[0].TIR = (0x555 << 21);        // StdID: 0x555 (11-bit)
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c22:	4a21      	ldr	r2, [pc, #132]	@ (8001ca8 <can_transmitter_send+0xb0>)
 8001c24:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

    CAN1->sTxMailBox[0].TDTR = 8;  // 8 byte veri
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184

    CAN1->sTxMailBox[0].TDLR = ((uint32_t)data[0]) |
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
                               ((uint32_t)data[1] << 8) |
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	021b      	lsls	r3, r3, #8
    CAN1->sTxMailBox[0].TDLR = ((uint32_t)data[0]) |
 8001c3e:	431a      	orrs	r2, r3
                               ((uint32_t)data[2] << 16) |
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3302      	adds	r3, #2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	041b      	lsls	r3, r3, #16
                               ((uint32_t)data[1] << 8) |
 8001c48:	431a      	orrs	r2, r3
                               ((uint32_t)data[3] << 24);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3303      	adds	r3, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	061b      	lsls	r3, r3, #24
    CAN1->sTxMailBox[0].TDLR = ((uint32_t)data[0]) |
 8001c52:	4914      	ldr	r1, [pc, #80]	@ (8001ca4 <can_transmitter_send+0xac>)
                               ((uint32_t)data[2] << 16) |
 8001c54:	4313      	orrs	r3, r2
    CAN1->sTxMailBox[0].TDLR = ((uint32_t)data[0]) |
 8001c56:	f8c1 3188 	str.w	r3, [r1, #392]	@ 0x188

    CAN1->sTxMailBox[0].TDHR = ((uint32_t)data[4]) |
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
                               ((uint32_t)data[5] << 8) |
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3305      	adds	r3, #5
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	021b      	lsls	r3, r3, #8
    CAN1->sTxMailBox[0].TDHR = ((uint32_t)data[4]) |
 8001c6a:	431a      	orrs	r2, r3
                               ((uint32_t)data[6] << 16) |
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3306      	adds	r3, #6
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	041b      	lsls	r3, r3, #16
                               ((uint32_t)data[5] << 8) |
 8001c74:	431a      	orrs	r2, r3
                               ((uint32_t)data[7] << 24);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3307      	adds	r3, #7
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	061b      	lsls	r3, r3, #24
    CAN1->sTxMailBox[0].TDHR = ((uint32_t)data[4]) |
 8001c7e:	4909      	ldr	r1, [pc, #36]	@ (8001ca4 <can_transmitter_send+0xac>)
                               ((uint32_t)data[6] << 16) |
 8001c80:	4313      	orrs	r3, r2
    CAN1->sTxMailBox[0].TDHR = ((uint32_t)data[4]) |
 8001c82:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c

    CAN1->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ;  // Gönder
 8001c86:	4b07      	ldr	r3, [pc, #28]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c88:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8001c8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <can_transmitter_send+0xac>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
 8001c96:	e000      	b.n	8001c9a <can_transmitter_send+0xa2>
        return;
 8001c98:	bf00      	nop
}
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40006400 	.word	0x40006400
 8001ca8:	aaa00000 	.word	0xaaa00000

08001cac <PID_Init>:
    .out_min = 0.0f,
    .out_max = 0.95f
};

void PID_Init(PID_Controller_t *pid, float Kp, float Ki, float Kd, float dt, float out_min, float out_max)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	61f8      	str	r0, [r7, #28]
 8001cb4:	ed87 0a06 	vstr	s0, [r7, #24]
 8001cb8:	edc7 0a05 	vstr	s1, [r7, #20]
 8001cbc:	ed87 1a04 	vstr	s2, [r7, #16]
 8001cc0:	edc7 1a03 	vstr	s3, [r7, #12]
 8001cc4:	ed87 2a02 	vstr	s4, [r7, #8]
 8001cc8:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]
    pid->dt = dt;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	60da      	str	r2, [r3, #12]

    pid->integral = 0.0f;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
    pid->previous_error = 0.0f;
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]

    pid->out_min = out_min;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	619a      	str	r2, [r3, #24]
    pid->out_max = out_max;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	61da      	str	r2, [r3, #28]
}
 8001d00:	bf00      	nop
 8001d02:	3724      	adds	r7, #36	@ 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <PID_Update>:

float PID_Update(PID_Controller_t *pid, float setpoint, float measurement)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b08b      	sub	sp, #44	@ 0x2c
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d18:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = setpoint - measurement;
 8001d1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d28:	edc7 7a07 	vstr	s15, [r7, #28]

    // P terimi
    float P = pid->Kp * error;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3a:	edc7 7a06 	vstr	s15, [r7, #24]

    // I terimi
    pid->integral += error * pid->dt;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	edc3 7a04 	vstr	s15, [r3, #16]
    float I = pid->Ki * pid->integral;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Anti-windup
    if (I > pid->out_max) I = pid->out_max;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d76:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	dd02      	ble.n	8001d8a <PID_Update+0x7e>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    if (I < pid->out_min) I = pid->out_min;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d90:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d502      	bpl.n	8001da4 <PID_Update+0x98>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24

    // D terimi
    float derivative = (error - pid->previous_error) / pid->dt;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001daa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbc:	edc7 7a05 	vstr	s15, [r7, #20]
    float D = pid->Kd * derivative;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->previous_error = error;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	615a      	str	r2, [r3, #20]

    float output = P + I + D;
 8001dd8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ddc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a08 	vstr	s15, [r7, #32]

    // Çıkışı sınırlama
    if (output > pid->out_max) output = pid->out_max;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001df6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd02      	ble.n	8001e0a <PID_Update+0xfe>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	623b      	str	r3, [r7, #32]
    if (output < pid->out_min) output = pid->out_min;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e10:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d502      	bpl.n	8001e24 <PID_Update+0x118>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	623b      	str	r3, [r7, #32]

    return output;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	ee07 3a90 	vmov	s15, r3
}
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	372c      	adds	r7, #44	@ 0x2c
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <sensor_monitoring>:

SystemState_t s_sys_state = {0};
SystemCANState_t s_can_state = SYS_STATE_IDLE;
e_state_t state = INIT;

void sensor_monitoring(){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
    s_sys_state.vout = Sensor_ConvertToVoltage(a_adc1_data_u16[0]);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <sensor_monitoring+0x44>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 ffc1 	bl	8002dc8 <Sensor_ConvertToVoltage>
 8001e46:	eef0 7a40 	vmov.f32	s15, s0
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <sensor_monitoring+0x48>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
    s_sys_state.iout = Sensor_ConvertToCurrent(a_adc1_data_u16[1]);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <sensor_monitoring+0x44>)
 8001e52:	885b      	ldrh	r3, [r3, #2]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 ffdd 	bl	8002e14 <Sensor_ConvertToCurrent>
 8001e5a:	eef0 7a40 	vmov.f32	s15, s0
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <sensor_monitoring+0x48>)
 8001e60:	edc3 7a01 	vstr	s15, [r3, #4]
    s_sys_state.temperature = Sensor_ConvertToVoltage(a_adc1_data_u16[2]);
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <sensor_monitoring+0x44>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 ffad 	bl	8002dc8 <Sensor_ConvertToVoltage>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <sensor_monitoring+0x48>)
 8001e74:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000070 	.word	0x20000070
 8001e80:	2000004c 	.word	0x2000004c

08001e84 <DeviceMainLoop>:

void DeviceMainLoop(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    switch(state)
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <DeviceMainLoop+0x180>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	f200 80b0 	bhi.w	8001ff2 <DeviceMainLoop+0x16e>
 8001e92:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <DeviceMainLoop+0x14>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001ead 	.word	0x08001ead
 8001e9c:	08001ef1 	.word	0x08001ef1
 8001ea0:	08001f11 	.word	0x08001f11
 8001ea4:	08001f37 	.word	0x08001f37
 8001ea8:	08001fd5 	.word	0x08001fd5
    {
        case INIT:
            // Donanım başlatma
            gpio_init();
 8001eac:	f000 fb2a 	bl	8002504 <gpio_init>
            adc1_init();
 8001eb0:	f000 f8c0 	bl	8002034 <adc1_init>
            tim1_init();
 8001eb4:	f000 fbf0 	bl	8002698 <tim1_init>
            tim4_init();
 8001eb8:	f000 fdc8 	bl	8002a4c <tim4_init>
            can_receiver_init();
 8001ebc:	f7ff fd96 	bl	80019ec <can_receiver_init>
            can_transmitter_init();
 8001ec0:	f7ff fe48 	bl	8001b54 <can_transmitter_init>

            // PID başlangıç parametreleri
            PID_Init(&pid_controller, 0.5f, 0.1f, 0.01f, 0.0001f, 0.0f, 0.95f);
 8001ec4:	eddf 2a50 	vldr	s5, [pc, #320]	@ 8002008 <DeviceMainLoop+0x184>
 8001ec8:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 800200c <DeviceMainLoop+0x188>
 8001ecc:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8002010 <DeviceMainLoop+0x18c>
 8001ed0:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 8002014 <DeviceMainLoop+0x190>
 8001ed4:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8002018 <DeviceMainLoop+0x194>
 8001ed8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001edc:	484f      	ldr	r0, [pc, #316]	@ (800201c <DeviceMainLoop+0x198>)
 8001ede:	f7ff fee5 	bl	8001cac <PID_Init>
            s_sys_state.vout_target = 24.0f; // Hedef voltaj 24V
 8001ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8002024 <DeviceMainLoop+0x1a0>)
 8001ee6:	619a      	str	r2, [r3, #24]

            state = MODE_EN;
 8001ee8:	4b46      	ldr	r3, [pc, #280]	@ (8002004 <DeviceMainLoop+0x180>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
            break;
 8001eee:	e087      	b.n	8002000 <DeviceMainLoop+0x17c>

        case MODE_EN:
            // Sensör ve girişleri oku
            sensor_monitoring();
 8001ef0:	f7ff ffa2 	bl	8001e38 <sensor_monitoring>
            saykal_io_monitoring();
 8001ef4:	f000 feb2 	bl	8002c5c <saykal_io_monitoring>
            saykal_io_toggle_status_led(5000); // Yavaş yanıp sönen LED
 8001ef8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001efc:	f000 fec6 	bl	8002c8c <saykal_io_toggle_status_led>

            // Enable koşulu (örneğin bir buton kontrolü)
            if(s_inputs.a_service_enable_b[0]) {
 8001f00:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <DeviceMainLoop+0x1a4>)
 8001f02:	795b      	ldrb	r3, [r3, #5]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d078      	beq.n	8001ffa <DeviceMainLoop+0x176>
                state = CONTROL;
 8001f08:	4b3e      	ldr	r3, [pc, #248]	@ (8002004 <DeviceMainLoop+0x180>)
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001f0e:	e074      	b.n	8001ffa <DeviceMainLoop+0x176>

        case CONTROL:
            // Sensör ve girişleri oku
            saykal_io_monitoring();
 8001f10:	f000 fea4 	bl	8002c5c <saykal_io_monitoring>
            sensor_monitoring();
 8001f14:	f7ff ff90 	bl	8001e38 <sensor_monitoring>

            // Başlangıç kontrolü yap
            if(s_sys_state.vout > 5.0f) { // Minimum başlama voltajı
 8001f18:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2a:	dc00      	bgt.n	8001f2e <DeviceMainLoop+0xaa>
                state = RUN;
            }
            break;
 8001f2c:	e068      	b.n	8002000 <DeviceMainLoop+0x17c>
                state = RUN;
 8001f2e:	4b35      	ldr	r3, [pc, #212]	@ (8002004 <DeviceMainLoop+0x180>)
 8001f30:	2203      	movs	r2, #3
 8001f32:	701a      	strb	r2, [r3, #0]
            break;
 8001f34:	e064      	b.n	8002000 <DeviceMainLoop+0x17c>

        case RUN:
            // 1. Sensör ve girişleri oku
            saykal_io_monitoring();
 8001f36:	f000 fe91 	bl	8002c5c <saykal_io_monitoring>
            sensor_monitoring();
 8001f3a:	f7ff ff7d 	bl	8001e38 <sensor_monitoring>

            // 2. PID ile duty hesapla
            s_sys_state.pwm_duty = PID_Update(&pid_controller,
 8001f3e:	4b38      	ldr	r3, [pc, #224]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f40:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f44:	4b36      	ldr	r3, [pc, #216]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f46:	ed93 7a00 	vldr	s14, [r3]
 8001f4a:	eef0 0a47 	vmov.f32	s1, s14
 8001f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f52:	4832      	ldr	r0, [pc, #200]	@ (800201c <DeviceMainLoop+0x198>)
 8001f54:	f7ff feda 	bl	8001d0c <PID_Update>
 8001f58:	eef0 7a40 	vmov.f32	s15, s0
 8001f5c:	4b30      	ldr	r3, [pc, #192]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f5e:	edc3 7a05 	vstr	s15, [r3, #20]
                                            s_sys_state.vout_target,
                                            s_sys_state.vout);

            // 3. Aşırı akım kontrolü
            if (s_sys_state.iout > 10.0f) {
 8001f62:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f64:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f68:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	dd0c      	ble.n	8001f90 <DeviceMainLoop+0x10c>
                s_sys_state.overcurrent = 1;
 8001f76:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	771a      	strb	r2, [r3, #28]
                s_can_state = SYS_STATE_OVERCURRENT;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <DeviceMainLoop+0x1a8>)
 8001f7e:	2203      	movs	r2, #3
 8001f80:	701a      	strb	r2, [r3, #0]
                saykal_io_set_fault_led(true);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 fe72 	bl	8002c6c <saykal_io_set_fault_led>
                state = FAULT;
 8001f88:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <DeviceMainLoop+0x180>)
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e01a      	b.n	8001fc6 <DeviceMainLoop+0x142>
            } else {
                s_sys_state.overcurrent = 0;
 8001f90:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	771a      	strb	r2, [r3, #28]
                s_can_state = SYS_STATE_RUNNING;
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <DeviceMainLoop+0x1a8>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
                saykal_io_set_fault_led(false);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 fe65 	bl	8002c6c <saykal_io_set_fault_led>

                // PWM çıkışını güncelle
                TIM1->CCR1 = (uint16_t)(s_sys_state.pwm_duty * TIM1->ARR);
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001fa4:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <DeviceMainLoop+0x1ac>)
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <DeviceMainLoop+0x1ac>)
 8001fc4:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            // 4. Telemetriyi CAN ile gönder
            protocol_init(&s_sys_state, s_can_state);
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <DeviceMainLoop+0x1a8>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4814      	ldr	r0, [pc, #80]	@ (8002020 <DeviceMainLoop+0x19c>)
 8001fce:	f000 fe09 	bl	8002be4 <protocol_init>
            break;
 8001fd2:	e015      	b.n	8002000 <DeviceMainLoop+0x17c>

        case FAULT:
            // PWM çıkışını sıfırla
            TIM1->CCR1 = 0;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <DeviceMainLoop+0x1ac>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	635a      	str	r2, [r3, #52]	@ 0x34

            // Reset butonunu bekle
            if(s_inputs.a_service_enable_b[1]) {
 8001fda:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <DeviceMainLoop+0x1a4>)
 8001fdc:	799b      	ldrb	r3, [r3, #6]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <DeviceMainLoop+0x17a>
                pid_controller.integral = 0; // Integral terimini sıfırla
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <DeviceMainLoop+0x198>)
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
                state = INIT;
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <DeviceMainLoop+0x180>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001ff0:	e005      	b.n	8001ffe <DeviceMainLoop+0x17a>

        default:
            state = INIT;
 8001ff2:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <DeviceMainLoop+0x180>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
            break;
 8001ff8:	e002      	b.n	8002000 <DeviceMainLoop+0x17c>
            break;
 8001ffa:	bf00      	nop
 8001ffc:	e000      	b.n	8002000 <DeviceMainLoop+0x17c>
            break;
 8001ffe:	bf00      	nop
    }
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000006d 	.word	0x2000006d
 8002008:	3f733333 	.word	0x3f733333
 800200c:	00000000 	.word	0x00000000
 8002010:	38d1b717 	.word	0x38d1b717
 8002014:	3c23d70a 	.word	0x3c23d70a
 8002018:	3dcccccd 	.word	0x3dcccccd
 800201c:	2000000c 	.word	0x2000000c
 8002020:	2000004c 	.word	0x2000004c
 8002024:	41c00000 	.word	0x41c00000
 8002028:	20000088 	.word	0x20000088
 800202c:	2000006c 	.word	0x2000006c
 8002030:	40012c00 	.word	0x40012c00

08002034 <adc1_init>:
    SCB->CPACR |= (3U << 22);  /* Set CP11 full access */
#endif
}

void adc1_init(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800203a:	4bb4      	ldr	r3, [pc, #720]	@ (800230c <adc1_init+0x2d8>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4ab3      	ldr	r2, [pc, #716]	@ (800230c <adc1_init+0x2d8>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_ADC12EN;
 8002046:	4bb1      	ldr	r3, [pc, #708]	@ (800230c <adc1_init+0x2d8>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4ab0      	ldr	r2, [pc, #704]	@ (800230c <adc1_init+0x2d8>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002050:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002052:	4bae      	ldr	r3, [pc, #696]	@ (800230c <adc1_init+0x2d8>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4aad      	ldr	r2, [pc, #692]	@ (800230c <adc1_init+0x2d8>)
 8002058:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800205c:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800205e:	4bab      	ldr	r3, [pc, #684]	@ (800230c <adc1_init+0x2d8>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	4aaa      	ldr	r2, [pc, #680]	@ (800230c <adc1_init+0x2d8>)
 8002064:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002068:	6153      	str	r3, [r2, #20]

    GPIOC->MODER |=  (3U << 0);              // PC0 Analog mode
 800206a:	4ba9      	ldr	r3, [pc, #676]	@ (8002310 <adc1_init+0x2dc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4aa8      	ldr	r2, [pc, #672]	@ (8002310 <adc1_init+0x2dc>)
 8002070:	f043 0303 	orr.w	r3, r3, #3
 8002074:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3U << 0);              // PC0 No pull-up, pull-down
 8002076:	4ba6      	ldr	r3, [pc, #664]	@ (8002310 <adc1_init+0x2dc>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	4aa5      	ldr	r2, [pc, #660]	@ (8002310 <adc1_init+0x2dc>)
 800207c:	f023 0303 	bic.w	r3, r3, #3
 8002080:	60d3      	str	r3, [r2, #12]

    GPIOC->MODER |=  (3U << 2);              // PC1 Analog mode
 8002082:	4ba3      	ldr	r3, [pc, #652]	@ (8002310 <adc1_init+0x2dc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4aa2      	ldr	r2, [pc, #648]	@ (8002310 <adc1_init+0x2dc>)
 8002088:	f043 030c 	orr.w	r3, r3, #12
 800208c:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3U << 2);              // PC1 No pull-up, pull-down
 800208e:	4ba0      	ldr	r3, [pc, #640]	@ (8002310 <adc1_init+0x2dc>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	4a9f      	ldr	r2, [pc, #636]	@ (8002310 <adc1_init+0x2dc>)
 8002094:	f023 030c 	bic.w	r3, r3, #12
 8002098:	60d3      	str	r3, [r2, #12]

    GPIOC->MODER |=  (3U << 4);              // PC2 Analog mode
 800209a:	4b9d      	ldr	r3, [pc, #628]	@ (8002310 <adc1_init+0x2dc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a9c      	ldr	r2, [pc, #624]	@ (8002310 <adc1_init+0x2dc>)
 80020a0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80020a4:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3U << 4);              // PC2 No pull-up, pull-down
 80020a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002310 <adc1_init+0x2dc>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4a99      	ldr	r2, [pc, #612]	@ (8002310 <adc1_init+0x2dc>)
 80020ac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020b0:	60d3      	str	r3, [r2, #12]

    GPIOC->MODER |=  (3U << 6);              // PC3 Analog mode
 80020b2:	4b97      	ldr	r3, [pc, #604]	@ (8002310 <adc1_init+0x2dc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a96      	ldr	r2, [pc, #600]	@ (8002310 <adc1_init+0x2dc>)
 80020b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020bc:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3U << 6);              // PC3 No pull-up, pull-down
 80020be:	4b94      	ldr	r3, [pc, #592]	@ (8002310 <adc1_init+0x2dc>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4a93      	ldr	r2, [pc, #588]	@ (8002310 <adc1_init+0x2dc>)
 80020c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80020c8:	60d3      	str	r3, [r2, #12]

    GPIOA->MODER |=  (3U << 0);              // PA0 Analog mode
 80020ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020d4:	f043 0303 	orr.w	r3, r3, #3
 80020d8:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << 0);              // PA0 No pull-up, pull-down
 80020da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020e4:	f023 0303 	bic.w	r3, r3, #3
 80020e8:	60d3      	str	r3, [r2, #12]

    GPIOA->MODER |=  (3U << 2);              // PA1 Analog mode
 80020ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80020f4:	f043 030c 	orr.w	r3, r3, #12
 80020f8:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << 2);              // PA1 No pull-up, pull-down
 80020fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002104:	f023 030c 	bic.w	r3, r3, #12
 8002108:	60d3      	str	r3, [r2, #12]

    GPIOA->MODER |=  (3U << 4);              // PA2 Analog mode
 800210a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002114:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002118:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << 4);              // PA2 No pull-up, pull-down
 800211a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002124:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002128:	60d3      	str	r3, [r2, #12]

    GPIOA->MODER |=  (3U << 6);              // PA3 Analog mode
 800212a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002134:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002138:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << 6);              // PA3 No pull-up, pull-down
 800213a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002144:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002148:	60d3      	str	r3, [r2, #12]

    GPIOB->MODER     |= (3U << 22);  		 // PA3 Analog mode
 800214a:	4b72      	ldr	r3, [pc, #456]	@ (8002314 <adc1_init+0x2e0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a71      	ldr	r2, [pc, #452]	@ (8002314 <adc1_init+0x2e0>)
 8002150:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002154:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR     &= ~(3U << 22);   	 // PB11 No pull-up, pull-down
 8002156:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <adc1_init+0x2e0>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <adc1_init+0x2e0>)
 800215c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002160:	60d3      	str	r3, [r2, #12]


    DMA1_Channel1->CCR &= ~(1U << 4);        // Read from peripheral
 8002162:	4b6d      	ldr	r3, [pc, #436]	@ (8002318 <adc1_init+0x2e4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6c      	ldr	r2, [pc, #432]	@ (8002318 <adc1_init+0x2e4>)
 8002168:	f023 0310 	bic.w	r3, r3, #16
 800216c:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR |=  (1U << 5);        // Circular mode enabled
 800216e:	4b6a      	ldr	r3, [pc, #424]	@ (8002318 <adc1_init+0x2e4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a69      	ldr	r2, [pc, #420]	@ (8002318 <adc1_init+0x2e4>)
 8002174:	f043 0320 	orr.w	r3, r3, #32
 8002178:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR &= ~(1U << 6);        // Peripheral increment mode disabled
 800217a:	4b67      	ldr	r3, [pc, #412]	@ (8002318 <adc1_init+0x2e4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a66      	ldr	r2, [pc, #408]	@ (8002318 <adc1_init+0x2e4>)
 8002180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002184:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR |=  (1U << 7);        // Memory increment mode enabled
 8002186:	4b64      	ldr	r3, [pc, #400]	@ (8002318 <adc1_init+0x2e4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a63      	ldr	r2, [pc, #396]	@ (8002318 <adc1_init+0x2e4>)
 800218c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002190:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR |=  (1U << 8);        // Peripheral size 16 bit
 8002192:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <adc1_init+0x2e4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a60      	ldr	r2, [pc, #384]	@ (8002318 <adc1_init+0x2e4>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219c:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR &= ~(1U << 9);        //
 800219e:	4b5e      	ldr	r3, [pc, #376]	@ (8002318 <adc1_init+0x2e4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002318 <adc1_init+0x2e4>)
 80021a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021a8:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR |=  (1U << 10);       // Memory size 16 bit
 80021aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002318 <adc1_init+0x2e4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002318 <adc1_init+0x2e4>)
 80021b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b4:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR &= ~(1U << 11);       //
 80021b6:	4b58      	ldr	r3, [pc, #352]	@ (8002318 <adc1_init+0x2e4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a57      	ldr	r2, [pc, #348]	@ (8002318 <adc1_init+0x2e4>)
 80021bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021c0:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR &= ~(3U << 12);       // Priority Low
 80021c2:	4b55      	ldr	r3, [pc, #340]	@ (8002318 <adc1_init+0x2e4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a54      	ldr	r2, [pc, #336]	@ (8002318 <adc1_init+0x2e4>)
 80021c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021cc:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR &= ~(1U << 14);       // Memory to memory mode disabled
 80021ce:	4b52      	ldr	r3, [pc, #328]	@ (8002318 <adc1_init+0x2e4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a51      	ldr	r2, [pc, #324]	@ (8002318 <adc1_init+0x2e4>)
 80021d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021d8:	6013      	str	r3, [r2, #0]

    ADC1->CFGR         |=  (1U  << 0);       // DMA mode enabled
 80021da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         |=  (1U  << 1);       // DMA Circular Mode selected
 80021ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(3U  << 4);       // Data resolution 12 bit
 80021fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002204:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002208:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(1U  << 5);       // Right alignment
 800220a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002214:	f023 0320 	bic.w	r3, r3, #32
 8002218:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(15U << 6);       // External trigger selection Event 0
 800221a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002224:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8002228:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(3U  << 10);      // Hardware trigger detection disabled (conversions can be launched by software)
 800222a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002234:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002238:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         |=  (1U  << 12);      // ADCx_DR register is overwritten with the last conversion result when an overrun is detected.
 800223a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002244:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002248:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         |=  (1U  << 13);      // Continuous conversion mode
 800224a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002254:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002258:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(1U  << 14);      // Auto-delayed conversion mode off
 800225a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002264:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002268:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(1U  << 16);      // Discontinuous mode for regular channels disabled
 800226a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002278:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR         &= ~(7U  << 17);      // Discontinuous mode channel count 1 channel
 800227a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002284:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8002288:	60d3      	str	r3, [r2, #12]

    ADC1->SQR1         |=  (9U << 0);        // Regular channel sequence length 9 conversions
 800228a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800228e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002290:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002294:	f043 0309 	orr.w	r3, r3, #9
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1         |=  (1U << 6);        // 1. conversion channel 1
 800229a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1         |=  (2U << 12);       // 2. conversion channel 2
 80022aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022b8:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1         |=  (3U << 18);       // 3. conversion channel 3
 80022ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022c4:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC1->SQR1         |=  (4U << 24);       // 4. conversion channel 4
 80022ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30

    ADC1->SQR2         |=  (6U << 0);        // 5. conversion channel 6
 80022da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022e4:	f043 0306 	orr.w	r3, r3, #6
 80022e8:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR2         |=  (7U << 6);        // 6. conversion channel 7
 80022ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80022f4:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 80022f8:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR2         |=  (8U << 12);       // 7. conversion channel 8
 80022fa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002308:	e008      	b.n	800231c <adc1_init+0x2e8>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	48000800 	.word	0x48000800
 8002314:	48000400 	.word	0x48000400
 8002318:	40020008 	.word	0x40020008
 800231c:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR2         |=  (9U << 18);       // 8. conversion channel 9
 800231e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002324:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002328:	f443 1310 	orr.w	r3, r3, #2359296	@ 0x240000
 800232c:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR2         |=  (16U << 24);      // 9. conversion channel 16
 800232e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002334:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233c:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->SQR3         |=  (14U << 0);      // 9. conversion channel 16
 800233e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002348:	f043 030e 	orr.w	r3, r3, #14
 800234c:	6393      	str	r3, [r2, #56]	@ 0x38

    ADC1->SMPR1        |=  (7U << 3);        // Channel 1 601.5 ADC clock cycles
 800234e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002358:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800235c:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 6);        // Channel 2 601.5 ADC clock cycles
 800235e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002368:	f443 73e0 	orr.w	r3, r3, #448	@ 0x1c0
 800236c:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 9);        // Channel 3 601.5 ADC clock cycles
 800236e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002378:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 800237c:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 12);       // Channel 4 601.5 ADC clock cycles
 800237e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002388:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800238c:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 18);       // Channel 6 601.5 ADC clock cycles
 800238e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002398:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800239c:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 21);       // Channel 7 601.5 ADC clock cycles
 800239e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023a8:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
 80023ac:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 24);       // Channel 8 601.5 ADC clock cycles
 80023ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023b8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80023bc:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1        |=  (7U << 27);       // Channel 9 601.5 ADC clock cycles
 80023be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023c8:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80023cc:	6153      	str	r3, [r2, #20]
    ADC1->SMPR2        |=  (7U << 18);       // Channel 16 601.5 ADC clock cycles
 80023ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023d8:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80023dc:	6193      	str	r3, [r2, #24]
    ADC1->SMPR2        |=  (7U << 12);       // Channel 14 601.5 ADC clock cycles
 80023de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023e8:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80023ec:	6193      	str	r3, [r2, #24]
    ADC1->DIFSEL       &= ~(0x3FFFFU << 1);  // All channels are single ended
 80023ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023f6:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 80023fa:	4b3c      	ldr	r3, [pc, #240]	@ (80024ec <adc1_init+0x4b8>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	f8c1 30b0 	str.w	r3, [r1, #176]	@ 0xb0

    ADC12_COMMON->CCR  &= ~(31U << 0);       // Independent mode
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <adc1_init+0x4bc>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4a3a      	ldr	r2, [pc, #232]	@ (80024f0 <adc1_init+0x4bc>)
 8002408:	f023 031f 	bic.w	r3, r3, #31
 800240c:	6093      	str	r3, [r2, #8]
    ADC12_COMMON->CCR  &= ~(15U << 8);       // Delay 0
 800240e:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <adc1_init+0x4bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a37      	ldr	r2, [pc, #220]	@ (80024f0 <adc1_init+0x4bc>)
 8002414:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002418:	6093      	str	r3, [r2, #8]
    ADC12_COMMON->CCR  &= ~(3U << 14);       // MDMA mode disabled
 800241a:	4b35      	ldr	r3, [pc, #212]	@ (80024f0 <adc1_init+0x4bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4a34      	ldr	r2, [pc, #208]	@ (80024f0 <adc1_init+0x4bc>)
 8002420:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002424:	6093      	str	r3, [r2, #8]
    ADC12_COMMON->CCR  &= ~(3U << 16);       // Asynchronous clock mode
 8002426:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <adc1_init+0x4bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <adc1_init+0x4bc>)
 800242c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002430:	6093      	str	r3, [r2, #8]
    ADC12_COMMON->CCR  |=  (1U << 23);       // Temperature sensor is enabled
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <adc1_init+0x4bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4a2e      	ldr	r2, [pc, #184]	@ (80024f0 <adc1_init+0x4bc>)
 8002438:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800243c:	6093      	str	r3, [r2, #8]

    ADC1->CR           |=  (1U << 28);       // ADC Voltage regulator enabled
 800243e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244c:	6093      	str	r3, [r2, #8]
    ADC1->CR           &= ~(1U << 29);       //
 800244e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002458:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800245c:	6093      	str	r3, [r2, #8]
    ADC1->CR           |=  (1U << 31);       // ADC Calibration
 800245e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002468:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800246c:	6093      	str	r3, [r2, #8]

    uint32_t i = INIT_ADC_DELAY;
 800246e:	4b21      	ldr	r3, [pc, #132]	@ (80024f4 <adc1_init+0x4c0>)
 8002470:	607b      	str	r3, [r7, #4]
    while(i--);                              // Wait for ADC internal voltage regulator stabilization */
 8002472:	bf00      	nop
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1fa      	bne.n	8002474 <adc1_init+0x440>

    DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <adc1_init+0x4c4>)
 8002480:	4a1e      	ldr	r2, [pc, #120]	@ (80024fc <adc1_init+0x4c8>)
 8002482:	609a      	str	r2, [r3, #8]
    DMA1_Channel1->CMAR = (uint32_t)(a_adc1_data_u16);
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <adc1_init+0x4c4>)
 8002486:	4a1e      	ldr	r2, [pc, #120]	@ (8002500 <adc1_init+0x4cc>)
 8002488:	60da      	str	r2, [r3, #12]

    DMA1_Channel1->CNDTR |=  (10U << 0);      // Number of data to transfer
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <adc1_init+0x4c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <adc1_init+0x4c4>)
 8002490:	f043 030a 	orr.w	r3, r3, #10
 8002494:	6053      	str	r3, [r2, #4]
    DMA1_Channel1->CCR   |=  (1U << 1);      // TC interrupt enabled
 8002496:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <adc1_init+0x4c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <adc1_init+0x4c4>)
 800249c:	f043 0302 	orr.w	r3, r3, #2
 80024a0:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR   |=  (1U << 0);      // Channel enabled
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <adc1_init+0x4c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <adc1_init+0x4c4>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6013      	str	r3, [r2, #0]

    ADC1->CR             |=  (1U << 0);      // Write 1 to enable the ADC
 80024ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6093      	str	r3, [r2, #8]
    while(!(ADC1->ISR & (1U << 0)));         // Wait for ADC is ready to start conversion
 80024be:	bf00      	nop
 80024c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f8      	beq.n	80024c0 <adc1_init+0x48c>
    ADC1->CR             |=  (1U << 2);      // Write 1 to start regular conversions
 80024ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6093      	str	r3, [r2, #8]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	fff80001 	.word	0xfff80001
 80024f0:	50000300 	.word	0x50000300
 80024f4:	2160ec00 	.word	0x2160ec00
 80024f8:	40020008 	.word	0x40020008
 80024fc:	50000040 	.word	0x50000040
 8002500:	20000070 	.word	0x20000070

08002504 <gpio_init>:



void gpio_init(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002508:	4b60      	ldr	r3, [pc, #384]	@ (800268c <gpio_init+0x188>)
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	4a5f      	ldr	r2, [pc, #380]	@ (800268c <gpio_init+0x188>)
 800250e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002512:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8002514:	4b5d      	ldr	r3, [pc, #372]	@ (800268c <gpio_init+0x188>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	4a5c      	ldr	r2, [pc, #368]	@ (800268c <gpio_init+0x188>)
 800251a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251e:	6153      	str	r3, [r2, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8002520:	4b5a      	ldr	r3, [pc, #360]	@ (800268c <gpio_init+0x188>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	4a59      	ldr	r2, [pc, #356]	@ (800268c <gpio_init+0x188>)
 8002526:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800252a:	6153      	str	r3, [r2, #20]

    /* Configure Inputs */
    GPIOB->MODER   &= ~(3U << 0);   // PB0 Reserved Input
 800252c:	4b58      	ldr	r3, [pc, #352]	@ (8002690 <gpio_init+0x18c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a57      	ldr	r2, [pc, #348]	@ (8002690 <gpio_init+0x18c>)
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR   &= ~(1U << 0);   // Pull-down
 8002538:	4b55      	ldr	r3, [pc, #340]	@ (8002690 <gpio_init+0x18c>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a54      	ldr	r2, [pc, #336]	@ (8002690 <gpio_init+0x18c>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR   |=  (1U << 1);   //
 8002544:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <gpio_init+0x18c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4a51      	ldr	r2, [pc, #324]	@ (8002690 <gpio_init+0x18c>)
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	60d3      	str	r3, [r2, #12]

    GPIOC->MODER   &= ~(3U << 10);  // PC5 Reserved Input
 8002550:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <gpio_init+0x190>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4f      	ldr	r2, [pc, #316]	@ (8002694 <gpio_init+0x190>)
 8002556:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800255a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR   &= ~(1U << 10);  // Pull-down
 800255c:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <gpio_init+0x190>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a4c      	ldr	r2, [pc, #304]	@ (8002694 <gpio_init+0x190>)
 8002562:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002566:	60d3      	str	r3, [r2, #12]
    GPIOC->OTYPER  |=  (1U << 10);  //
 8002568:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <gpio_init+0x190>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a49      	ldr	r2, [pc, #292]	@ (8002694 <gpio_init+0x190>)
 800256e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002572:	6053      	str	r3, [r2, #4]

    GPIOC->MODER   &= ~(3U << 8);   // PC4 Reserved Input
 8002574:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <gpio_init+0x190>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a46      	ldr	r2, [pc, #280]	@ (8002694 <gpio_init+0x190>)
 800257a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800257e:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR   &= ~(1U << 8);   // Pull-down
 8002580:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <gpio_init+0x190>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a43      	ldr	r2, [pc, #268]	@ (8002694 <gpio_init+0x190>)
 8002586:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800258a:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR   |=  (1U << 8);   //
 800258c:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <gpio_init+0x190>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a40      	ldr	r2, [pc, #256]	@ (8002694 <gpio_init+0x190>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002596:	60d3      	str	r3, [r2, #12]

    GPIOA->MODER   &= ~(3U << 14);  // PA7 Reserved Input
 8002598:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025a2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80025a6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(1U << 14);  // Pull-down
 80025a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025b6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (1U << 15);  //
 80025b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025c6:	60d3      	str	r3, [r2, #12]

    GPIOA->MODER   &= ~(3U << 12);  // PA6 Reserved Input
 80025c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025d6:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(1U << 12);  // Pull-down
 80025d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025e6:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (1U << 13);  //
 80025e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80025f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025f6:	60d3      	str	r3, [r2, #12]

    /* Configure Outputs */
    GPIOC->BRR      =  (1U << 12);  // PC6 status led
 80025f8:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <gpio_init+0x190>)
 80025fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80025fe:	629a      	str	r2, [r3, #40]	@ 0x28
    GPIOC->MODER   |=  (1U << 12);  //
 8002600:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <gpio_init+0x190>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a23      	ldr	r2, [pc, #140]	@ (8002694 <gpio_init+0x190>)
 8002606:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800260a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER   &= ~(1U << 13);  //
 800260c:	4b21      	ldr	r3, [pc, #132]	@ (8002694 <gpio_init+0x190>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a20      	ldr	r2, [pc, #128]	@ (8002694 <gpio_init+0x190>)
 8002612:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002616:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR   &= ~(3U << 12);  //
 8002618:	4b1e      	ldr	r3, [pc, #120]	@ (8002694 <gpio_init+0x190>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a1d      	ldr	r2, [pc, #116]	@ (8002694 <gpio_init+0x190>)
 800261e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002622:	60d3      	str	r3, [r2, #12]
    GPIOC->OSPEEDR &= ~(3U << 12);  //
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <gpio_init+0x190>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a1a      	ldr	r2, [pc, #104]	@ (8002694 <gpio_init+0x190>)
 800262a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800262e:	6093      	str	r3, [r2, #8]
    GPIOC->OTYPER  &= ~(1U << 6);   //
 8002630:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <gpio_init+0x190>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a17      	ldr	r2, [pc, #92]	@ (8002694 <gpio_init+0x190>)
 8002636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800263a:	6053      	str	r3, [r2, #4]

    GPIOC->BRR      =  (1U << 14);  // PC7 fault led
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <gpio_init+0x190>)
 800263e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
    GPIOC->MODER   |=  (1U << 14);  //
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <gpio_init+0x190>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a12      	ldr	r2, [pc, #72]	@ (8002694 <gpio_init+0x190>)
 800264a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800264e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER   &= ~(1U << 15);  //
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <gpio_init+0x190>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0f      	ldr	r2, [pc, #60]	@ (8002694 <gpio_init+0x190>)
 8002656:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800265a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR   &= ~(3U << 14);  //
 800265c:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <gpio_init+0x190>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <gpio_init+0x190>)
 8002662:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002666:	60d3      	str	r3, [r2, #12]
    GPIOC->OSPEEDR &= ~(3U << 14);  //
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <gpio_init+0x190>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <gpio_init+0x190>)
 800266e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002672:	6093      	str	r3, [r2, #8]
    GPIOC->OTYPER  &= ~(1U << 7);   //
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <gpio_init+0x190>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <gpio_init+0x190>)
 800267a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800267e:	6053      	str	r3, [r2, #4]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	48000400 	.word	0x48000400
 8002694:	48000800 	.word	0x48000800

08002698 <tim1_init>:


/* PWM signals configuration  */
void tim1_init(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800269c:	4bae      	ldr	r3, [pc, #696]	@ (8002958 <tim1_init+0x2c0>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4aad      	ldr	r2, [pc, #692]	@ (8002958 <tim1_init+0x2c0>)
 80026a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026a6:	6193      	str	r3, [r2, #24]
    RCC->AHBENR  |= RCC_AHBENR_GPIOAEN;
 80026a8:	4bab      	ldr	r3, [pc, #684]	@ (8002958 <tim1_init+0x2c0>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4aaa      	ldr	r2, [pc, #680]	@ (8002958 <tim1_init+0x2c0>)
 80026ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b2:	6153      	str	r3, [r2, #20]

    /* PWM 1 */
    GPIOA->MODER      &= ~(1U << 16);    // PA8 Alternate function mode
 80026b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER      |=  (1U << 17);    //
 80026c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR      &= ~(1U << 16);    // PA8 No pull-up, pull-down
 80026d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR      &= ~(1U << 17);    //
 80026e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026ee:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80026f2:	60d3      	str	r3, [r2, #12]
    GPIOA->OSPEEDR    &= ~(1U << 16);    // PA8 Low speed
 80026f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002702:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR    &= ~(1U << 17);    //
 8002704:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800270e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002712:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER     &= ~(1U << 8);     // PA8 Output push-pull
 8002714:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800271e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002722:	6053      	str	r3, [r2, #4]
    GPIOA->AFR[1]     &= ~(1U << 0);     // AF6 (TIM1)
 8002724:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1]     |=  (1U << 1);     //
 8002734:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1]     |=  (1U << 2);     //
 8002744:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1]     &= ~(1U << 3);     //
 8002754:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800275e:	f023 0308 	bic.w	r3, r3, #8
 8002762:	6253      	str	r3, [r2, #36]	@ 0x24

    /* PWM 2 */
    GPIOA->MODER      &= ~(1U << 18);    // PA9 Alternate function mode
 8002764:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800276e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002772:	6013      	str	r3, [r2, #0]
    GPIOA->MODER      |=  (1U << 19);    //
 8002774:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800277e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002782:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR      &= ~(1U << 18);    // PA9 No pull-up, pull-down
 8002784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800278e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002792:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR      &= ~(1U << 19);    //
 8002794:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800279e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80027a2:	60d3      	str	r3, [r2, #12]
    GPIOA->OSPEEDR    &= ~(1U << 18);    // PA9 Low speed
 80027a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b2:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR    &= ~(1U << 19);    //
 80027b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027be:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80027c2:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER     &= ~(1U << 9);     // PA9 Output push-pull
 80027c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027ce:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80027d2:	6053      	str	r3, [r2, #4]
    GPIOA->AFR[1]     &= ~(1U << 4);     // AF6 (TIM1)
 80027d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027de:	f023 0310 	bic.w	r3, r3, #16
 80027e2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1]     |=  (1U << 5);     //
 80027e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027ee:	f043 0320 	orr.w	r3, r3, #32
 80027f2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1]     |=  (1U << 6);     //
 80027f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80027fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002802:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1]     &= ~(1U << 7);     //
 8002804:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800280e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002812:	6253      	str	r3, [r2, #36]	@ 0x24

    TIM1->CR1         &= ~(1U << 4);     // Counter used as upcounter
 8002814:	4b51      	ldr	r3, [pc, #324]	@ (800295c <tim1_init+0x2c4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a50      	ldr	r2, [pc, #320]	@ (800295c <tim1_init+0x2c4>)
 800281a:	f023 0310 	bic.w	r3, r3, #16
 800281e:	6013      	str	r3, [r2, #0]
    TIM1->CR1         &= ~(1U << 7);     // Disable ARR Preload
 8002820:	4b4e      	ldr	r3, [pc, #312]	@ (800295c <tim1_init+0x2c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4d      	ldr	r2, [pc, #308]	@ (800295c <tim1_init+0x2c4>)
 8002826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800282a:	6013      	str	r3, [r2, #0]
    TIM1->CR1         &= ~(3U << 8);     // Clock division 1
 800282c:	4b4b      	ldr	r3, [pc, #300]	@ (800295c <tim1_init+0x2c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4a      	ldr	r2, [pc, #296]	@ (800295c <tim1_init+0x2c4>)
 8002832:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002836:	6013      	str	r3, [r2, #0]
    TIM1->CR2         &= ~(7U << 4);     // Master mode selection reset
 8002838:	4b48      	ldr	r3, [pc, #288]	@ (800295c <tim1_init+0x2c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a47      	ldr	r2, [pc, #284]	@ (800295c <tim1_init+0x2c4>)
 800283e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002842:	6053      	str	r3, [r2, #4]

    TIM1->CR2         &= ~(1U << 8);     // OC1  idle state low
 8002844:	4b45      	ldr	r3, [pc, #276]	@ (800295c <tim1_init+0x2c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a44      	ldr	r2, [pc, #272]	@ (800295c <tim1_init+0x2c4>)
 800284a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800284e:	6053      	str	r3, [r2, #4]
    TIM1->CR2         &= ~(1U << 9);     // OC1N idle state low
 8002850:	4b42      	ldr	r3, [pc, #264]	@ (800295c <tim1_init+0x2c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a41      	ldr	r2, [pc, #260]	@ (800295c <tim1_init+0x2c4>)
 8002856:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800285a:	6053      	str	r3, [r2, #4]
    TIM1->CR2         &= ~(1U << 10);    // OC2  idle state low
 800285c:	4b3f      	ldr	r3, [pc, #252]	@ (800295c <tim1_init+0x2c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a3e      	ldr	r2, [pc, #248]	@ (800295c <tim1_init+0x2c4>)
 8002862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002866:	6053      	str	r3, [r2, #4]
    TIM1->CR2         &= ~(1U << 11);    // OC2N idle state low
 8002868:	4b3c      	ldr	r3, [pc, #240]	@ (800295c <tim1_init+0x2c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <tim1_init+0x2c4>)
 800286e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002872:	6053      	str	r3, [r2, #4]

    TIM1->CCMR1       &= ~(1U << 2);     // OC1 fast disable
 8002874:	4b39      	ldr	r3, [pc, #228]	@ (800295c <tim1_init+0x2c4>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a38      	ldr	r2, [pc, #224]	@ (800295c <tim1_init+0x2c4>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       &= ~(1U << 10);    // OC2 fast disable
 8002880:	4b36      	ldr	r3, [pc, #216]	@ (800295c <tim1_init+0x2c4>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a35      	ldr	r2, [pc, #212]	@ (800295c <tim1_init+0x2c4>)
 8002886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800288a:	6193      	str	r3, [r2, #24]

    TIM1->CCMR1       |=  (1U << 3);     // OC1 preload enable
 800288c:	4b33      	ldr	r3, [pc, #204]	@ (800295c <tim1_init+0x2c4>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a32      	ldr	r2, [pc, #200]	@ (800295c <tim1_init+0x2c4>)
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       |=  (1U << 11);    // OC2 preload enable
 8002898:	4b30      	ldr	r3, [pc, #192]	@ (800295c <tim1_init+0x2c4>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	4a2f      	ldr	r2, [pc, #188]	@ (800295c <tim1_init+0x2c4>)
 800289e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028a2:	6193      	str	r3, [r2, #24]

    TIM1->CCMR1       &= ~(7U << 4);     // OC1 PWM mode 1
 80028a4:	4b2d      	ldr	r3, [pc, #180]	@ (800295c <tim1_init+0x2c4>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <tim1_init+0x2c4>)
 80028aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ae:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       |=  (1U << 5);     //
 80028b0:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <tim1_init+0x2c4>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a29      	ldr	r2, [pc, #164]	@ (800295c <tim1_init+0x2c4>)
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       |=  (1U << 6);     //
 80028bc:	4b27      	ldr	r3, [pc, #156]	@ (800295c <tim1_init+0x2c4>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a26      	ldr	r2, [pc, #152]	@ (800295c <tim1_init+0x2c4>)
 80028c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028c6:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       &= ~(7U << 12);    // OC2 PWM mode 1
 80028c8:	4b24      	ldr	r3, [pc, #144]	@ (800295c <tim1_init+0x2c4>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a23      	ldr	r2, [pc, #140]	@ (800295c <tim1_init+0x2c4>)
 80028ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028d2:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       |=  (1U << 13);    //
 80028d4:	4b21      	ldr	r3, [pc, #132]	@ (800295c <tim1_init+0x2c4>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a20      	ldr	r2, [pc, #128]	@ (800295c <tim1_init+0x2c4>)
 80028da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028de:	6193      	str	r3, [r2, #24]
    TIM1->CCMR1       |=  (1U << 14);    //
 80028e0:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <tim1_init+0x2c4>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	@ (800295c <tim1_init+0x2c4>)
 80028e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028ea:	6193      	str	r3, [r2, #24]

    TIM1->CCER        &= ~(1U << 2);     // OC1N is not active
 80028ec:	4b1b      	ldr	r3, [pc, #108]	@ (800295c <tim1_init+0x2c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	@ (800295c <tim1_init+0x2c4>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	6213      	str	r3, [r2, #32]
    TIM1->CCER        &= ~(1U << 6);     // OC2N is not active
 80028f8:	4b18      	ldr	r3, [pc, #96]	@ (800295c <tim1_init+0x2c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a17      	ldr	r2, [pc, #92]	@ (800295c <tim1_init+0x2c4>)
 80028fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002902:	6213      	str	r3, [r2, #32]

    TIM1->CCER        &= ~(1U << 0);     // OC1  is not active
 8002904:	4b15      	ldr	r3, [pc, #84]	@ (800295c <tim1_init+0x2c4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4a14      	ldr	r2, [pc, #80]	@ (800295c <tim1_init+0x2c4>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6213      	str	r3, [r2, #32]
    TIM1->CCER        &= ~(1U << 4);     // OC2  is not active
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <tim1_init+0x2c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <tim1_init+0x2c4>)
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	6213      	str	r3, [r2, #32]

    TIM1->CCER        |=  (1U << 3);     // OC1N polarity is active low
 800291c:	4b0f      	ldr	r3, [pc, #60]	@ (800295c <tim1_init+0x2c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a0e      	ldr	r2, [pc, #56]	@ (800295c <tim1_init+0x2c4>)
 8002922:	f043 0308 	orr.w	r3, r3, #8
 8002926:	6213      	str	r3, [r2, #32]
    TIM1->CCER        |=  (1U << 7);     // OC2N polarity is active low
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <tim1_init+0x2c4>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	4a0b      	ldr	r2, [pc, #44]	@ (800295c <tim1_init+0x2c4>)
 800292e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002932:	6213      	str	r3, [r2, #32]

    TIM1->CCER        &= ~(1U << 1);     // OC1  polarity is active high
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <tim1_init+0x2c4>)
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a08      	ldr	r2, [pc, #32]	@ (800295c <tim1_init+0x2c4>)
 800293a:	f023 0302 	bic.w	r3, r3, #2
 800293e:	6213      	str	r3, [r2, #32]
    TIM1->CCER        &= ~(1U << 5);     // OC2  polarity is active high
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <tim1_init+0x2c4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a05      	ldr	r2, [pc, #20]	@ (800295c <tim1_init+0x2c4>)
 8002946:	f023 0320 	bic.w	r3, r3, #32
 800294a:	6213      	str	r3, [r2, #32]

    TIM1->BDTR        |=  (255U << 0);   // Dead-time
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <tim1_init+0x2c4>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	4a02      	ldr	r2, [pc, #8]	@ (800295c <tim1_init+0x2c4>)
 8002952:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8002956:	e003      	b.n	8002960 <tim1_init+0x2c8>
 8002958:	40021000 	.word	0x40021000
 800295c:	40012c00 	.word	0x40012c00
 8002960:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(3U << 8);     // Lock level off
 8002962:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <tim1_init+0x3b0>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	4a38      	ldr	r2, [pc, #224]	@ (8002a48 <tim1_init+0x3b0>)
 8002968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800296c:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(1U << 10);    // OC/OCN are disabled in idle
 800296e:	4b36      	ldr	r3, [pc, #216]	@ (8002a48 <tim1_init+0x3b0>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <tim1_init+0x3b0>)
 8002974:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002978:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(1U << 11);    // OC/OCN are disabled in run
 800297a:	4b33      	ldr	r3, [pc, #204]	@ (8002a48 <tim1_init+0x3b0>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297e:	4a32      	ldr	r2, [pc, #200]	@ (8002a48 <tim1_init+0x3b0>)
 8002980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002984:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(1U << 12);    // Break inputs disabled
 8002986:	4b30      	ldr	r3, [pc, #192]	@ (8002a48 <tim1_init+0x3b0>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a48 <tim1_init+0x3b0>)
 800298c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002990:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        |=  (1U << 13);    // Break input BRK is active high
 8002992:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <tim1_init+0x3b0>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4a2c      	ldr	r2, [pc, #176]	@ (8002a48 <tim1_init+0x3b0>)
 8002998:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800299c:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(1U << 14);    // Automatic output disable
 800299e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <tim1_init+0x3b0>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <tim1_init+0x3b0>)
 80029a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029a8:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(1U << 15);    // Main output disable
 80029aa:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <tim1_init+0x3b0>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ae:	4a26      	ldr	r2, [pc, #152]	@ (8002a48 <tim1_init+0x3b0>)
 80029b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80029b4:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(15U << 16);   // No filter, BRK  acts asynchronously
 80029b6:	4b24      	ldr	r3, [pc, #144]	@ (8002a48 <tim1_init+0x3b0>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	4a23      	ldr	r2, [pc, #140]	@ (8002a48 <tim1_init+0x3b0>)
 80029bc:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80029c0:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(15U << 20);   // No filter, BRK2 acts asynchronously
 80029c2:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <tim1_init+0x3b0>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <tim1_init+0x3b0>)
 80029c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80029cc:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        &= ~(1U << 24);    // Break input BRK2 disabled
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <tim1_init+0x3b0>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a48 <tim1_init+0x3b0>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d8:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->BDTR        |=  (1U << 25);    // Break input BRK2 is active high
 80029da:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <tim1_init+0x3b0>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a1a      	ldr	r2, [pc, #104]	@ (8002a48 <tim1_init+0x3b0>)
 80029e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44

    TIM1->CCR1         =  0;             // Capture Compare Register 1
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <tim1_init+0x3b0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2         =  0;             // Capture Compare Register 2
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <tim1_init+0x3b0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->PSC = 9;
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <tim1_init+0x3b0>)
 80029f4:	2209      	movs	r2, #9
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 279; // 56 MHz / (9+1) / (279+1) = 20 kHz
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <tim1_init+0x3b0>)
 80029fa:	f240 1217 	movw	r2, #279	@ 0x117
 80029fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM1->CCR1         =  0;             // Capture compare 1 zero
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <tim1_init+0x3b0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2         =  0;             // Capture compare 2 zero
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <tim1_init+0x3b0>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM1->CCER        |=  (1U << 0);     // PWM1  enabled
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <tim1_init+0x3b0>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <tim1_init+0x3b0>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
    TIM1->CCER        |=  (1U << 4);     // PWM2  enabled
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <tim1_init+0x3b0>)
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <tim1_init+0x3b0>)
 8002a1e:	f043 0310 	orr.w	r3, r3, #16
 8002a22:	6213      	str	r3, [r2, #32]
    TIM1->BDTR        |=  (1U << 15);    // Main output enabled
 8002a24:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <tim1_init+0x3b0>)
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	4a07      	ldr	r2, [pc, #28]	@ (8002a48 <tim1_init+0x3b0>)
 8002a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a2e:	6453      	str	r3, [r2, #68]	@ 0x44
    TIM1->CR1         |=  (1U << 0);     // Counter enabled
 8002a30:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <tim1_init+0x3b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <tim1_init+0x3b0>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00

08002a4c <tim4_init>:

/* Timebase counter for state machine */
void tim4_init(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <tim4_init+0x80>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <tim4_init+0x80>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	61d3      	str	r3, [r2, #28]

    TIM4->CR1  &= ~(1U << 4);    // Counter used as upcounter
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad0 <tim4_init+0x84>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <tim4_init+0x84>)
 8002a62:	f023 0310 	bic.w	r3, r3, #16
 8002a66:	6013      	str	r3, [r2, #0]
    TIM4->CR1  &= ~(1U << 7);    // Disable ARR Preload
 8002a68:	4b19      	ldr	r3, [pc, #100]	@ (8002ad0 <tim4_init+0x84>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <tim4_init+0x84>)
 8002a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a72:	6013      	str	r3, [r2, #0]
    TIM4->CR1  &= ~(3U << 8);    // Clock division 1
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <tim4_init+0x84>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <tim4_init+0x84>)
 8002a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a7e:	6013      	str	r3, [r2, #0]
    TIM4->CR2  &= ~(7U << 4);    // Master mode selection reset
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <tim4_init+0x84>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a12      	ldr	r2, [pc, #72]	@ (8002ad0 <tim4_init+0x84>)
 8002a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8a:	6053      	str	r3, [r2, #4]
    TIM4->SMCR &= ~(1U << 7);    // Disable master slave mode
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <tim4_init+0x84>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <tim4_init+0x84>)
 8002a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a96:	6093      	str	r3, [r2, #8]

    TIM4->PSC   =  55;           // Prescaler
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <tim4_init+0x84>)
 8002a9a:	2237      	movs	r2, #55	@ 0x37
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR   =  65535;        // Auto-reload register
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <tim4_init+0x84>)
 8002aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM4->CR1  |=  (1U << 0);    // Counter enabled
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <tim4_init+0x84>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <tim4_init+0x84>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6013      	str	r3, [r2, #0]

    while(!(TIM4->SR & 0x01));   // Wait for Update interrupt flag
 8002ab2:	bf00      	nop
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <tim4_init+0x84>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f9      	beq.n	8002ab4 <tim4_init+0x68>
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40000800 	.word	0x40000800

08002ad4 <TIM3_IRQHandler>:


can_rx_msg_t s_can_rx_msg;
e_state_t system_state;
void TIM3_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b94 <TIM3_IRQHandler+0xc0>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d055      	beq.n	8002b90 <TIM3_IRQHandler+0xbc>
        TIM3->SR &= ~TIM_SR_UIF;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <TIM3_IRQHandler+0xc0>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <TIM3_IRQHandler+0xc0>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6113      	str	r3, [r2, #16]
        if (system_state == RUN) {
 8002af0:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <TIM3_IRQHandler+0xc4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d14b      	bne.n	8002b90 <TIM3_IRQHandler+0xbc>
            s_sys_state.vout = Sensor_ConvertToVoltage(a_adc1_data_u16[0]);
 8002af8:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <TIM3_IRQHandler+0xc8>)
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f963 	bl	8002dc8 <Sensor_ConvertToVoltage>
 8002b02:	eef0 7a40 	vmov.f32	s15, s0
 8002b06:	4b26      	ldr	r3, [pc, #152]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
            s_sys_state.iout = Sensor_ConvertToCurrent(a_adc1_data_u16[1]);
 8002b0c:	4b23      	ldr	r3, [pc, #140]	@ (8002b9c <TIM3_IRQHandler+0xc8>)
 8002b0e:	885b      	ldrh	r3, [r3, #2]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f97f 	bl	8002e14 <Sensor_ConvertToCurrent>
 8002b16:	eef0 7a40 	vmov.f32	s15, s0
 8002b1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b1c:	edc3 7a01 	vstr	s15, [r3, #4]
            s_sys_state.pwm_duty = PID_Update(&pid_controller, s_sys_state.vout_target, s_sys_state.vout);
 8002b20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b22:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b28:	ed93 7a00 	vldr	s14, [r3]
 8002b2c:	eef0 0a47 	vmov.f32	s1, s14
 8002b30:	eeb0 0a67 	vmov.f32	s0, s15
 8002b34:	481b      	ldr	r0, [pc, #108]	@ (8002ba4 <TIM3_IRQHandler+0xd0>)
 8002b36:	f7ff f8e9 	bl	8001d0c <PID_Update>
 8002b3a:	eef0 7a40 	vmov.f32	s15, s0
 8002b3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b40:	edc3 7a05 	vstr	s15, [r3, #20]
            if (s_sys_state.iout > 10.0f) {
 8002b44:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b46:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002b4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b56:	dd09      	ble.n	8002b6c <TIM3_IRQHandler+0x98>
                s_sys_state.pwm_duty = 0.0f;
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
                system_state = FAULT;
 8002b60:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <TIM3_IRQHandler+0xc4>)
 8002b62:	2204      	movs	r2, #4
 8002b64:	701a      	strb	r2, [r3, #0]
                s_can_state = SYS_STATE_OVERCURRENT;
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <TIM3_IRQHandler+0xd4>)
 8002b68:	2203      	movs	r2, #3
 8002b6a:	701a      	strb	r2, [r3, #0]
                //saykal_io_set_fault_led(true);
            }
            TIM1->CCR1 = (uint16_t)(s_sys_state.pwm_duty * TIM1->ARR);
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <TIM3_IRQHandler+0xcc>)
 8002b6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <TIM3_IRQHandler+0xd8>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b86:	ee17 3a90 	vmov	r3, s15
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <TIM3_IRQHandler+0xd8>)
 8002b8e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
    }
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40000400 	.word	0x40000400
 8002b98:	20000084 	.word	0x20000084
 8002b9c:	20000070 	.word	0x20000070
 8002ba0:	2000004c 	.word	0x2000004c
 8002ba4:	2000000c 	.word	0x2000000c
 8002ba8:	2000006c 	.word	0x2000006c
 8002bac:	40012c00 	.word	0x40012c00

08002bb0 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
    if (CAN->RF0R & CAN_RF0R_FMP0) {
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <USB_LP_CAN_RX0_IRQHandler+0x2c>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00b      	beq.n	8002bd8 <USB_LP_CAN_RX0_IRQHandler+0x28>
        can_read_msg(&s_can_rx_msg);
 8002bc0:	4807      	ldr	r0, [pc, #28]	@ (8002be0 <USB_LP_CAN_RX0_IRQHandler+0x30>)
 8002bc2:	f7fe ff55 	bl	8001a70 <can_read_msg>
        CAN->RF0R |= CAN_RF0R_RFOM0;
 8002bc6:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <USB_LP_CAN_RX0_IRQHandler+0x2c>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <USB_LP_CAN_RX0_IRQHandler+0x2c>)
 8002bcc:	f043 0320 	orr.w	r3, r3, #32
 8002bd0:	60d3      	str	r3, [r2, #12]
        can_receive_callback(&s_can_rx_msg);
 8002bd2:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <USB_LP_CAN_RX0_IRQHandler+0x30>)
 8002bd4:	f7fe ff94 	bl	8001b00 <can_receive_callback>
    }
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40006400 	.word	0x40006400
 8002be0:	20000078 	.word	0x20000078

08002be4 <protocol_init>:
#include "protocol.h"
#include "can_transmitter.h"

void protocol_init(const SystemState_t* sys, SystemCANState_t status)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
    can_payload_t payload;

    payload.vout_mV   = (uint16_t)(sys->vout * 100.0f);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002c58 <protocol_init+0x74>
 8002bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c02:	ee17 3a90 	vmov	r3, s15
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	813b      	strh	r3, [r7, #8]
    payload.iout_mA   = (uint16_t)(sys->iout * 100.0f);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c10:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002c58 <protocol_init+0x74>
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1c:	ee17 3a90 	vmov	r3, s15
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	817b      	strh	r3, [r7, #10]
    payload.temp_cC   = (uint16_t)(sys->temperature * 100.0f);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c2a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c58 <protocol_init+0x74>
 8002c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c36:	ee17 3a90 	vmov	r3, s15
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	81bb      	strh	r3, [r7, #12]
    payload.status    = (uint8_t)status;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	73bb      	strb	r3, [r7, #14]
    payload.reserved  = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73fb      	strb	r3, [r7, #15]

    can_transmitter_send(&payload);
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe ffd4 	bl	8001bf8 <can_transmitter_send>
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	42c80000 	.word	0x42c80000

08002c5c <saykal_io_monitoring>:
// Statik sayaç sadece toggle fonksiyonu içinde kullanılır
static void saykal_io_read_inputs(void);
static void saykal_io_write_outputs(void);

void saykal_io_monitoring(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
    saykal_io_read_inputs();
 8002c60:	f000 f83c 	bl	8002cdc <saykal_io_read_inputs>
    saykal_io_write_outputs();
 8002c64:	f000 f88e 	bl	8002d84 <saykal_io_write_outputs>
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <saykal_io_set_fault_led>:

void saykal_io_set_fault_led(bool value)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
    s_outputs.fault_led_b = value;
 8002c76:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <saykal_io_set_fault_led+0x1c>)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	7013      	strb	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	20000090 	.word	0x20000090

08002c8c <saykal_io_toggle_status_led>:
{
    s_outputs.status_led_b = value;
}

void saykal_io_toggle_status_led(uint32_t toggle_period)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    static uint32_t counter_u32 = 0;
    if ((counter_u32++) > toggle_period)
 8002c94:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd4 <saykal_io_toggle_status_led+0x48>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	490e      	ldr	r1, [pc, #56]	@ (8002cd4 <saykal_io_toggle_status_led+0x48>)
 8002c9c:	600a      	str	r2, [r1, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d211      	bcs.n	8002cc8 <saykal_io_toggle_status_led+0x3c>
    {
        counter_u32 = 0;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <saykal_io_toggle_status_led+0x48>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
        s_outputs.status_led_b = !s_outputs.status_led_b;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <saykal_io_toggle_status_led+0x4c>)
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <saykal_io_toggle_status_led+0x4c>)
 8002cc6:	705a      	strb	r2, [r3, #1]
    }
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	20000094 	.word	0x20000094
 8002cd8:	20000090 	.word	0x20000090

08002cdc <saykal_io_read_inputs>:

// Giriş pinlerini oku (GPIO'dan)
static void saykal_io_read_inputs(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
    s_inputs.a_service_enable_b[0] = 0;
 8002ce0:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	715a      	strb	r2, [r3, #5]
    s_inputs.a_service_enable_b[1] = 0;
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	719a      	strb	r2, [r3, #6]
    s_inputs.a_service_enable_b[2] = 0;
 8002cec:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	71da      	strb	r2, [r3, #7]

    s_inputs.a_canbus_address_b[0] = (bool)((GPIOB->IDR >> 0) & 0x01);  // PB0
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <saykal_io_read_inputs+0xa0>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002d06:	701a      	strb	r2, [r3, #0]
    s_inputs.a_canbus_address_b[1] = (bool)((GPIOC->IDR >> 5) & 0x01);  // PC5
 8002d08:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <saykal_io_read_inputs+0xa4>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002d1e:	705a      	strb	r2, [r3, #1]
    s_inputs.a_canbus_address_b[2] = (bool)((GPIOC->IDR >> 4) & 0x01);  // PC4
 8002d20:	4b17      	ldr	r3, [pc, #92]	@ (8002d80 <saykal_io_read_inputs+0xa4>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002d36:	709a      	strb	r2, [r3, #2]
    s_inputs.a_canbus_address_b[3] = (bool)((GPIOA->IDR >> 7) & 0x01);  // PA7
 8002d38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	09db      	lsrs	r3, r3, #7
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002d50:	70da      	strb	r2, [r3, #3]
    s_inputs.a_canbus_address_b[4] = (bool)((GPIOA->IDR >> 6) & 0x01);  // PA6
 8002d52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b03      	ldr	r3, [pc, #12]	@ (8002d78 <saykal_io_read_inputs+0x9c>)
 8002d6a:	711a      	strb	r2, [r3, #4]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000088 	.word	0x20000088
 8002d7c:	48000400 	.word	0x48000400
 8002d80:	48000800 	.word	0x48000800

08002d84 <saykal_io_write_outputs>:

// Çıkış pinlerini güncelle (LED'ler)
static void saykal_io_write_outputs(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
    if (s_outputs.fault_led_b)
 8002d88:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <saykal_io_write_outputs+0x3c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <saykal_io_write_outputs+0x14>
        GPIOC->BSRR = (1U << 7);  // PC7 HIGH
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <saykal_io_write_outputs+0x40>)
 8002d92:	2280      	movs	r2, #128	@ 0x80
 8002d94:	619a      	str	r2, [r3, #24]
 8002d96:	e002      	b.n	8002d9e <saykal_io_write_outputs+0x1a>
    else
        GPIOC->BRR  = (1U << 7);  // PC7 LOW
 8002d98:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <saykal_io_write_outputs+0x40>)
 8002d9a:	2280      	movs	r2, #128	@ 0x80
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28

    if (s_outputs.status_led_b)
 8002d9e:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <saykal_io_write_outputs+0x3c>)
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <saykal_io_write_outputs+0x2a>
        GPIOC->BSRR = (1U << 6);  // PC6 HIGH
 8002da6:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <saykal_io_write_outputs+0x40>)
 8002da8:	2240      	movs	r2, #64	@ 0x40
 8002daa:	619a      	str	r2, [r3, #24]
    else
        GPIOC->BRR  = (1U << 6);  // PC6 LOW
}
 8002dac:	e002      	b.n	8002db4 <saykal_io_write_outputs+0x30>
        GPIOC->BRR  = (1U << 6);  // PC6 LOW
 8002dae:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <saykal_io_write_outputs+0x40>)
 8002db0:	2240      	movs	r2, #64	@ 0x40
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000090 	.word	0x20000090
 8002dc4:	48000800 	.word	0x48000800

08002dc8 <Sensor_ConvertToVoltage>:
 *      Author: 90545
 */
#include "sensor_converter.h"

float Sensor_ConvertToVoltage(uint16_t adc_val)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
    float v_adc = ((float)adc_val * ADC_VREF) / ADC_RESOLUTION;
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ddc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002e0c <Sensor_ConvertToVoltage+0x44>
 8002de0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002de4:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002e10 <Sensor_ConvertToVoltage+0x48>
 8002de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dec:	edc7 7a03 	vstr	s15, [r7, #12]
    return v_adc * VOLTAGE_DIVIDER_GAIN;
 8002df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df4:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8002df8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40533333 	.word	0x40533333
 8002e10:	457ff000 	.word	0x457ff000

08002e14 <Sensor_ConvertToCurrent>:

float Sensor_ConvertToCurrent(uint16_t adc_val)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
    return ((float)adc_val) * CURRENT_CALC_FACTOR;
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002e40 <Sensor_ConvertToCurrent+0x2c>
 8002e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e30:	eeb0 0a67 	vmov.f32	s0, s15
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	3ad34067 	.word	0x3ad34067

08002e44 <memset>:
 8002e44:	4402      	add	r2, r0
 8002e46:	4603      	mov	r3, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4d0d      	ldr	r5, [pc, #52]	@ (8002e8c <__libc_init_array+0x38>)
 8002e58:	4c0d      	ldr	r4, [pc, #52]	@ (8002e90 <__libc_init_array+0x3c>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	2600      	movs	r6, #0
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	4d0b      	ldr	r5, [pc, #44]	@ (8002e94 <__libc_init_array+0x40>)
 8002e66:	4c0c      	ldr	r4, [pc, #48]	@ (8002e98 <__libc_init_array+0x44>)
 8002e68:	f000 f818 	bl	8002e9c <_init>
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	2600      	movs	r6, #0
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	08002ee4 	.word	0x08002ee4
 8002e90:	08002ee4 	.word	0x08002ee4
 8002e94:	08002ee4 	.word	0x08002ee4
 8002e98:	08002ee8 	.word	0x08002ee8

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr
